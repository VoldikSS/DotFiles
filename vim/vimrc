" vim:fdm=marker:fmr=[[[,]]]

" ========================================================================
" Introduction:
"    -> Author: voldikss
"    -> Blog: https://voldikss.github.io
"    -> GitHub: https://github.com/voldikss
" Todo:
" ========================================================================

" GlobalVariables: [[[1
" IndentCont: indent count when type <CR> and then \
let g:vim_indent_cont = 4
" TerminalHeight:
let g:terminal_height = 15
let g:terminal_type = 'floating'
" QuickfixHeight:
let g:quickfix_height = 9
" ToggleWindows:
let g:only_one_win = 1
let g:windows_toggle = {
    \ 'defx': {
        \ 'open': 'Defx',
        \ 'close': 'Defx'
    \ },
    \ 'vista': {
        \ 'open':'Vista',
        \ 'close': 'Vista!'
    \ },
    \ 'qf': {
        \ 'open': 'OpenQf',
        \ 'close': 'cclose'
    \ },
    \ 'Mundo': {
        \ 'open': 'MundoToggle',
        \ 'close': 'MundoToggle'
    \ },
    \ 'terminal': {
        \ 'open': 'ToggleTerminal',
        \ 'close': 'ToggleTerminal'
    \ }
    \ }
" DontLoad: [[[2
let g:loaded_gzip = 0
let g:loaded_zipPlugin = 0
let g:loaded_2html_plugin = 0
let g:loaded_tarPlugin = 0
" PythonHost: [[[2
if has('win32') || has('win64') || has('win32unix')
    let g:python3_host_prog='D:/Applications/Python36/python.exe'
else
    let g:python3_host_prog='/usr/bin/python3'
endif
" NeoVimTerminalColors: [[[2
let g:terminal_color_0  = '#282828'
let g:terminal_color_1  = '#cc241d'
let g:terminal_color_2  = '#00ffff'
let g:terminal_color_3  = '#d79921'
let g:terminal_color_4  = '#458588'
let g:terminal_color_5  = '#b16286'
let g:terminal_color_6  = '#689d6a'
let g:terminal_color_7  = '#a89984'
let g:terminal_color_8  = '#928374'
let g:terminal_color_9  = '#fb4934'
let g:terminal_color_10 = '#00df5f'
let g:terminal_color_11 = '#fabd2f'
let g:terminal_color_12 = '#00afff'
let g:terminal_color_13 = '#d3869b'
let g:terminal_color_14 = '#8ec07c'
let g:terminal_color_15 = '#ebdbb2'
" PluginLoad: [[[1
call plug#begin('~/.vim/plugged')
" Languages [[[2
Plug 'octol/vim-cpp-enhanced-highlight', {'for': ['c', 'cpp']}
Plug 'cpiger/NeoDebug', {'for':['c', 'cpp']}
Plug 'godlygeek/tabular', {'for': 'markdown'}
Plug 'plasticboy/vim-markdown', {'for': 'markdown'}
Plug 'iamcco/markdown-preview.nvim', {'for':'markdown', 'do':  ':call mkdp#util#install()', 'frozen': 1}
Plug 'dhruvasagar/vim-table-mode',{'for': 'markdown', 'on': 'TableFormat'}
Plug 'rhysd/vim-gfm-syntax', {'for': 'markdown'}
Plug 'rstacruz/sparkup', {'for':['html', 'htmldjango']}
Plug 'othree/html5.vim', {'for':['html', 'htmldjango']}
Plug 'jaxbot/browserlink.vim', {'for': ['html', 'htmldjango', 'css']}
Plug 'alvan/vim-closetag', {'for': ['html', 'xml', 'htmldjango']}
Plug 'pangloss/vim-javascript'
Plug 'vim-python/python-syntax'
Plug 'numirias/semshi', {'do': ':UpdateRemotePlugins'}
Plug 'lervag/vimtex'
Plug 'HerringtonDarkholme/yats.vim'
Plug 'leafgarland/typescript-vim'
" Completion [[[2
Plug 'neoclide/coc.nvim', {'do': 'yarn install --frozen-lockfile', 'frozen':1}
" Style [[[2
Plug 'Yggdroot/indentLine'
if has('nvim')
  Plug 'Shougo/defx.nvim', { 'do': ':UpdateRemotePlugins' }
else
  Plug 'Shougo/defx.nvim'
  Plug 'roxma/nvim-yarp'
  Plug 'roxma/vim-hug-neovim-rpc'
endif
Plug 'kristijanhusak/defx-git'
Plug 'kristijanhusak/defx-icons'
Plug 'mhinz/vim-startify'
Plug 'itchyny/lightline.vim'
Plug 'mengelbrecht/lightline-bufferline'
Plug 'ryanoasis/vim-devicons'
Plug 'simnalamburt/vim-mundo', {'on': 'MundoToggle'}
Plug 'kshenoy/vim-signature'
Plug 'guns/xterm-color-table.vim', {'on': 'XtermColorTable'}
" Git [[[2
Plug 'tpope/vim-fugitive'
Plug 'cohama/agit.vim', {'on': 'Agit'}
Plug 'mattn/gist-vim', {'on': 'Gist'}
Plug 'mattn/webapi-vim'
Plug 'rhysd/git-messenger.vim', {'on': '<Plug>(git-messenger)'}
" Enhancements [[[2
Plug 'skywind3000/asyncrun.vim'
Plug 'Yggdroot/LeaderF'
Plug 'voldikss/vim-search-me'
Plug 'voldikss/vim-translate-me'
Plug 'ahonn/fileheader.nvim', {'on': ['AddFileHeader', 'UpdateFileHeader']}
Plug 'inkarkat/vim-mark', {'on': '<Plug>MarkSet'}
Plug 'inkarkat/vim-ingo-library'
Plug 'moll/vim-bbye'
Plug 'liuchengxu/vista.vim', {'on': 'Vista'}
" Move [[[2
Plug 'tommcdo/vim-exchange', {'on': ['<Plug>(Exchange)', '<Plug>(ExchangeLine)', '<Plug>(ExchangeClear)']}
Plug 'matze/vim-move', {'on': ['<Plug>MoveLineUp', '<Plug>MoveLineDown', '<Plug>MoveBlockUp', '<Plug>MoveBlockDown']}
Plug 'andrewradev/sideways.vim', {'on': ['SidewaysLeft', 'SidewaysRight']}
" Plug 'rhysd/clever-f.vim'
" Edit [[[2
Plug 'tpope/vim-commentary'
Plug 'bronson/vim-visual-star-search'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-repeat'
Plug 'foosoft/vim-argwrap', {'on': 'ArgWrap'}
Plug 'junegunn/vim-easy-align'
Plug 'wellle/targets.vim'
" Misc [[[2
Plug 'yianwillis/vimcdoc'
Plug 'metakirby5/codi.vim', {'on': 'Codi'}
Plug 'tweekmonster/startuptime.vim', {'on': 'StartupTime'}
call plug#end()
" General: [[[1
" file & directory & format [[[2
set history=2000
set pumheight=15
set updatetime=100
set autoread
set autowrite
set nobackup
set noswapfile
set nowritebackup
set undodir=~/.cache/nvim/undo_dir/
set undofile
set isfname-==
set encoding=utf-8
set fileencodings=utf-8,cp936,gb18030,big5,euc-jp,euc-kr,latin1
set fileformats=unix,dos,mac
set nrformats=
set hidden
set fileignorecase
set formatoptions+=m
set formatoptions+=B
set dictionary+=~/.vim/dict/dictionary.txt
" key [[[2
set timeout
set ttimeout
set timeoutlen=500
set ttimeoutlen=20
set mouse-=a
set mousehide
set selectmode=mouse
set clipboard=
set backspace=2
set backspace=eol,start,indent
set whichwrap=b,s,<,>,[,]
set completeopt-=preview
set nomodeline
" style [[[2
colorscheme molokai
set termguicolors
set guicursor=
set pumheight=15
set title
set ruler
set cursorline
set laststatus=2
set showtabline=2
set guioptions-=e
set shortmess+=c
set scrolloff=6
set wrap
" match & search [[[2
set showmatch
set matchtime=1
set matchpairs+=<:>
set matchpairs+=《:》
set matchpairs+=（:）
set matchpairs+=【:】
set matchpairs+=“:”
set matchpairs+=‘:’
set hlsearch
set incsearch
set wrapscan
set ignorecase
set smartcase
" tab & space & indent [[[2
set tabstop=4
set shiftwidth=4
set softtabstop=4
set smarttab
set expandtab
set shiftround
set relativenumber number
set foldlevel=99
set conceallevel=0
set autoindent
set smartindent
" command window [[[2
set wildmenu
set wildmode=longest,full
set wildignorecase
set wildignore+=.stversions,*.pyc,*.spl,*.o,*.out,*~,%*
set wildignore+=*.jpg,*.jpeg,*.png,*.gif,*.zip,**/tmp/**,*.DS_Store
set wildignore+=__pycache__,*.egg-info
" nvim only [[[2
if has('nvim') &&  matchstr(execute('silent version'), 'NVIM v\zs[^\n-]*') >= '0.4.0'
set inccommand=nosplit
set wildoptions+=pum
set signcolumn=yes:2
set pumblend=10
endif
" Keymap: [[[1
" LeaderKey: [[[2
let mapleader   = ';'
let g:mapleader = ';'
" General: [[[2
noremap  H  ^
noremap  L  $
"cannot use noremap
nmap     M  %
noremap  U  <C-R>
noremap  '  `
inoremap jj <Esc>
inoremap jk <Esc>
vnoremap <  <gv
vnoremap >  >gv
noremap <C-U> kkkkkkkkkkkkkkkkkkkkk
noremap <C-D> jjjjjjjjjjjjjjjjjjjjj
" Jump: [[[2
noremap <C-j>      <C-]>
noremap <C-W><C-j> <C-W><C-]>
noremap <C-k>      K
" Search: [[[2
nnoremap <silent> n  nzz
nnoremap <silent> N  Nzz
nnoremap <silent> *  *zz
nnoremap <silent> #  #zz
" Diff: [[[2
if &diff == 1
    vmap <silent> <buffer> dg :diffget<CR>
    vmap <silent> <buffer> dp :diffput<CR>
    nmap <silent> <buffer> dg V:diffget<CR>
    nmap <silent> <buffer> dp V:diffput<CR>
endif
" BufferOperation: [[[2
nmap     <silent> -         :Explore<CR>
nnoremap <silent> <C-h>     :bprev<CR>
tnoremap <silent> <C-h>     <C-\><C-n>:bprev<CR>
nnoremap <silent> <C-l>     :bnext<CR>
tnoremap <silent> <C-l>     <C-\><C-n>:bnext<CR>
noremap  <silent> <Leader>d :Bdelete!<CR>
" TabOperation: [[[2
noremap  <silent> <C-t> <Esc>:tabnew<CR>
noremap! <silent> <C-t> <Esc>:tabnew<CR>
nnoremap <silent> gj :tabnext<CR>
nnoremap <silent> gk :tabprevious<CR>
" TextCopy: [[[2
nnoremap Y y$
nnoremap <Leader>y "+yy
vnoremap <Leader>y "+y
nnoremap <Leader>Y "+y$
nnoremap <Leader>p "+p
nnoremap <Leader>P "+P
noremap  <silent> <Leader>sa <Esc>ggVG
vnoremap <silent> <C-c> "+y
" InsertMode: move [[[2
inoremap <C-k> <Up>
inoremap <C-j> <Down>
inoremap <C-h> <Left>
inoremap <C-l> <Right>
inoremap <C-b> <Esc>bi
inoremap <C-f> <Esc>ea
inoremap <C-a> <Home>
inoremap <C-e> <End>
inoremap <C-o> <End><CR>
inoremap <M-o> <Esc>O
inoremap <C-d> <Esc>ddi
inoremap <C-c> <Esc>C
" InsertMode: ;* [[[2
inoremap ;; <End>;
inoremap ;, <End>,
inoremap ;a <Home>
inoremap ;e <End>
inoremap ;h <Left>
inoremap ;j <Down>
inoremap ;k <Up>
inoremap ;l <Right>
inoremap ;o <End><CR>
inoremap ;O <Esc>O
inoremap ;u <C-u>
inoremap ;c <Esc><Right>C
inoremap ;s <Esc>S
inoremap ;i <Esc>I
" SaveAndQuit: [[[2
nnoremap <silent> <Leader>w :wa<CR>
nnoremap <silent> <Leader>q :q<CR>
nnoremap <silent> <Leader>Q :qa!<CR>
nnoremap <silent> Q         :qa!<CR>
" CommandMode: [[[2
cnoremap <C-a> <Home>
cnoremap <C-e> <End>
cnoremap <C-p> <Up>
cnoremap <C-n> <Down>
cnoremap <C-b> <S-Left>
cnoremap <C-f> <S-Right>
" TerminalMode: [[[2
tnoremap <Esc>  <C-\><C-n>
if has('win32') || has('win64')
    nnoremap <silent> <Leader>n :vert term<CR>
    nnoremap <silent> ,n        :term<CR>
else
    nnoremap <silent> <Leader>n :vsplit term://zsh<CR>
    nnoremap <silent> ,n        :edit term://zsh<CR>
endif
" WindowOperation: [[[2
if has('nvim')
nnoremap <M-h> <C-w>h
nnoremap <M-j> <C-w>j
nnoremap <M-k> <C-w>k
nnoremap <M-l> <C-w>l
inoremap <M-h> <Esc><C-w>h
inoremap <M-j> <Esc><C-w>j
inoremap <M-k> <Esc><C-w>k
inoremap <M-l> <Esc><C-w>l
tnoremap <M-h> <C-\><C-n><C-w>h
tnoremap <M-j> <C-\><C-n><C-w>j
tnoremap <M-k> <C-\><C-n><C-w>k
tnoremap <M-l> <C-\><C-n><C-w>l
cnoremap <expr> <C-n>  pumvisible() ? '<Right>' : '<Down>'
cnoremap <expr> <C-p>  pumvisible() ? '<Left>' : '<Up>'
cnoremap <expr> <Up>   pumvisible() ? '<C-p>' : '<up>'
cnoremap <expr> <Down> pumvisible() ? '<C-n>' : '<down>'
endif
" WindowSize: [[[2
if has('nvim')
noremap <M-up>    <C-w>+
noremap <M-down>  <C-w>-
noremap <M-left>  <C-w>5<
noremap <M-right> <C-w>5>
endif
" ClearnSearchHighlight:  [[[2
if has('nvim')
inoremap <silent> <Esc> <Esc>:noh<CR>
nnoremap <silent> <Esc> <Esc>:noh<CR>
endif
nnoremap <silent> <BS> <Esc>:noh<CR>
" Customized function [[[2
noremap  <silent> <F2>            <Esc>:call ToggleWindows('defx')<CR>
noremap! <silent> <F2>            <Esc>:call ToggleWindows('defx')<CR>
tnoremap <silent> <F2>            <C-\><C-n>:call ToggleWindows('defx')<CR>
noremap  <silent> <F3>            <Esc>:call ToggleWindows('Mundo')<CR>
noremap! <silent> <F3>            <Esc>:call ToggleWindows('Mundo')<CR>
tnoremap <silent> <F3>            <C-\><C-n>:call ToggleWindows('Mundo')<CR>
noremap  <silent> <F4>            <Esc>:call FileExplore()<CR>
noremap  <silent> <F5>            <Esc>:call QuickRun()<CR>
noremap! <silent> <F5>            <Esc>:call QuickRun()<CR>
noremap  <silent> <Leader>x       <Esc>:call QuickRun()<CR>
noremap  <silent> <Leader><Space> <Esc>:call ToggleWindows('qf')<CR>
tnoremap <silent> <Leader><Space> <C-\><C-n>:call ToggleWindows('qf')<CR>
noremap  <silent> <F6>            <Esc>:call Autoformat()<CR>
noremap  <silent> ;;              <Esc>:call Autoformat()<CR>
noremap! <silent> <F6>            <Esc>:call Autoformat()<CR>
noremap  <silent> <F10>           <Esc>:call ToggleWindows('vista')<CR>
noremap! <silent> <F10>           <Esc>:call ToggleWindows('vista')<CR>
tnoremap <silent> <F10>           <C-\><C-n>:call ToggleWindows('vista')<CR>
noremap  <silent> <expr><F12>     &buftype =='terminal' ?
                                  \ "\<C-\><C-n>:call ToggleWindows('terminal')\<CR>" :
                                  \ "\<Esc>:call ToggleWindows('terminal')\<CR>i<C-u>"
noremap! <silent> <F12>           <Esc>:call ToggleWindows('terminal')<CR>i
tnoremap <silent> <F12>           <C-\><C-n>:call ToggleWindows('terminal')<CR>
nnoremap <expr>   <CR>            NormalMapForEnter() . "\<Esc>"
inoremap <expr>   <CR>            InsertMapForEnter()
inoremap <expr>   <BS>            MapForBackspace()
inoremap <expr>   ;<CR>           InsertMapForSemicolonEnter()
inoremap <expr>   ;p              InsertMapForSemicolonP()
inoremap <expr>   ;;              InsertMapForDoubleSemicolon()
" Autocmd: [[[1
augroup AutocmdGroup
    autocmd!
" General: [[[2
    autocmd BufEnter * if &buftype == 'terminal' |
        \ setlocal signcolumn=no |
        \ setlocal nobuflisted |
        \ endif
" ParenthesisColor: [[[2
    autocmd VimEnter,BufWinEnter *
        \ if index(['html', 'htmldjango', 'tex', 'mma'], &filetype) < 0 |
            \ syntax match paren1 /[{}]/   | hi paren1 guifg=#FF00FF |
            \ syntax match paren2 /[()]/   | hi paren2 guifg=#DF8700 |
            \ syntax match paren3 /[<>]/   | hi paren3 guifg=#0087FF |
            \ syntax match paren4 /[\[\]]/ | hi paren4 guifg=#00FF5F |
        \ endif
" AutoSaveBuffer: [[[2
    autocmd FocusLost * call AutoSaveBuffer()
" DisableAutoComment: [[[2
    autocmd FileType * set formatoptions-=cro
" LineNumber: [[[2
    autocmd BufEnter,FocusGained,InsertLeave,WinEnter * if &nu | set rnu   | endif
    autocmd BufLeave,FocusLost,InsertEnter,WinLeave   * if &nu | set nornu | endif
" EqualWindowsSize: [[[2
    autocmd VimResized * exec "normal \<C-w>="
" LastPosition: [[[2
    autocmd BufReadPost *
        \ if line("'\"") > 1 && line("'\"") <= line("$") |
            \ exe "normal! g'\"" |
        \ endif
" KeywordHighlight: [[[2
    autocmd Syntax *
        \ call matchadd('Todo',  '\W\zs\(TODO\|FIXME\|CHANGED\|XXX\|BUG\|HACK\)') |
        \ call matchadd('Todo',  '\W\zs\(NOTE\|Note\|INFO\|IDEA\|NOTICE\)') |
        \ call matchadd('Debug', '\W\zs\(Debug\|DEBUG\)') |
" AutoChdir: [[[2
    autocmd BufEnter * silent! lcd %:p:h
" GitIgnore: [[[2
    autocmd BufNewFile .gitignore CocCommand template.templateTop
" Plugins: [[[2
    " coc.nvim [[[3
    " close preview window when completion is done.
    autocmd! CompleteDone * if pumvisible() == 0 | pclose | endif
    " coc-highlight
    if exists('g:coc_enabled')
        autocmd CursorHold * silent call CocActionAsync('highlight')
    endif
    " coc-pairs
    let s:coc_pairs_expand = [['（', '）'], ['“', '”'], ['‘', '’'], ['《', '》']]
    autocmd FileType tex let b:coc_pairs = extend([['$', '$']], s:coc_pairs_expand)
    autocmd FileType html let b:coc_pairs = extend([['<!--', '-->'], ['{%', '%}']], s:coc_pairs_expand)
    autocmd FileType markdown let b:coc_pairs = extend([['*', '*']], s:coc_pairs_expand)
    autocmd FileType javascript,css,c,cpp let b:coc_pairs = extend([['/*', '*/']], s:coc_pairs_expand)
    autocmd FileType vim let b:coc_pairs_disabled = ['"']
    " defx
    autocmd BufLeave * if &filetype == 'defx' | :Defx | endif
    " vim-argwrap [[[3
    autocmd FileType vim let b:argwrap_line_prefix = '\'
    autocmd FileType vim let b:argwrap_tail_indent_braces = '('
    " vim-commentary [[[3
    autocmd FileType python,shell,coffee,crontab,toml setlocal commentstring=#\ %s
    autocmd FileType java,c,cpp,json,jsonc            setlocal commentstring=//\ %s
augroup END
"
" Command: [[[1
" Commons: [[[2
command! -nargs=+ Grep        call Grep(<q-args>)
command! -nargs=+ -complete=command TabMessage call TabMessage(<q-args>)
command! -nargs=0 SetQuickRunCommand  call SetQuickRunCommand()
command! -nargs=0 OpenQf              execute 'copen' .  g:quickfix_height
command! -nargs=0 ToggleTerminal        call ToggleTerminal(winheight(0)/3*2, &columns)
" GitOperation: [[[2
command! Gap  Git add -p
command! Cd   Gcd
command! Gd   Gvdiff
command! Gl   Git lg
command! Gs   Gstatus
command! Gc   Gcommit -v
command! Gca  Gcommit -a -v
command! Gcaa Gcommit --amend -a -v
command! Gco  execute "AsyncRun git checkout ."
command! Grm  Gremove
command! Gmv  Gmove
" VimPlug: [[[2
command! PI  PlugInstall
command! PU  PlugUpdate
command! PUU PlugUpgrade
command! PS  PlugStatus
command! PC  PlugClean
" Function: [[[1
" Autoformat: format code [[[2
function! Autoformat()
    let curr_pos = getpos('.')
    silent! execute '%s/\s\+$//g'
    call CocAction('format')
    update
    call setpos('.', curr_pos)
endfunction
function! AutoSaveBuffer()
    update
    if index(['html', 'htmldjango', 'css'], &filetype) >= 0
        BLReloadPage
    endif
endfunction
" QuickRun: one key to run [[[2
function! QuickRun()
    exec 'w'
    AsyncStop
    sleep 500m  " wait job to stop
    if exists('g:quickrun_command')
        execute g:quickrun_command
    elseif &filetype == 'c'
        if has('unix')
            AsyncRun gcc -g % && ./a.out
        else
            AsyncRun gcc -g "$(VIM_FILEPATH)" -o "a.exe" && "$(VIM_FILEDIR)/a.exe"
        endif
    elseif &filetype == 'cpp'
        if has('unix')
            AsyncRun g++ -g % && ./a.out
        else
            AsyncRun g++ -g "$(VIM_FILEPATH)" -o "a.exe" && "$(VIM_FILEDIR)\a.exe"
        endif
    elseif &filetype == 'html' || &filetype == 'htmldjango'
        call BrowserOpen(expand("%:p"))
        BLReloadPage
    elseif &filetype == 'java'
        AsyncRun javac % && java %:r
    elseif &filetype == 'javascript'
        AsyncRun node %
    elseif &filetype == 'markdown'
        MarkdownPreview
    elseif &filetype == 'python'
        if has("unix")
            AsyncRun -raw python3 %
        else
            AsyncRun -raw python "$(VIM_FILEPATH)"
        endif
    elseif &filetype == 'rust'
        AsyncRun cargo run
    elseif &filetype == 'sh'
        AsyncRun bash %
    elseif &filetype == 'tex'
        VimtexCompile
    elseif &filetype == 'typescript'
        AsyncRun tsc %
    elseif &filetype == 'vim'
        source %
    else
        echo "Not supported filetype:" . " " . &filetype
    endif
endfunction

" SetQuickRunCommand: specify quickrun command
function! SetQuickRunCommand() abort
    echohl Title
    echo "Select and input the number:"
    echohl None
    let cmd_list = [
        \ '----------------------------------------',
        \ '1. Input your own command',
        \ '2. AsyncRun -raw python3 %',
        \ '3. AsyncRun -raw python2 %',
        \ '4. AsyncRun cargo run',
        \ '5. AsyncRun rustc % && ./%:r',
        \ '6. AsyncRun tsc',
        \ '7. AsyncRun tsc --watch',
        \ '8. AsyncRun make',
        \ '9. Codi python'
        \ ]
    let select = inputlist(cmd_list)
    if select == 0
        return
    elseif select == 1
		echohl ModeMsg
        let cmd = input("Input your command: ", "", "shellcmd")
        echohl None
        if trim(cmd) == ""
            return
        endif
        let g:quickrun_command = cmd
    elseif select > 0 && select < len(cmd_list)
        let g:quickrun_command = cmd_list[select][3:]
    else
        echohl ErrorMsg
        echo "\nInvalid input"
        echohl None
        return
    endif
    echohl Title
    echo "\n\nYour QuickRun command is"
    echohl Preproc
    echo g:quickrun_command
    echohl None
endfunction
" FileExplore: open cwd in file explore [[[2
function! FileExplore()
    let l:path = expand(getcwd())
    call BrowserOpen(l:path)
endfunction
" BrowserOpen: open file or url [[[2
function! BrowserOpen(obj)
    " windows(mingw)
    if has('win32') || has('win64') || has('win32unix')
        let l:cmd = 'rundll32 url.dll,FileProtocolHandler ' . a:obj
    elseif has('mac') || has('macunix') || has('gui_macvim') || system('uname') =~? '^darwin'
        let l:cmd = 'open ' . a:obj
    elseif executable('xdg-open')
        let l:cmd = 'xdg-open ' . a:obj
    else
        echoerr "No browser found, please contact the developer."
    endif

    exec 'AsyncRun -post=cclose' . ' ' . l:cmd
endfunction
" TabMessage: capture command output [[[2
function! TabMessage(cmd)
  redir => message
  silent execute a:cmd
  redir END
  if empty(message)
    echoerr "no output"
  else
    new
    setlocal buftype=nofile bufhidden=wipe noswapfile nobuflisted nomodified
    silent put=message
  endif
endfunction
" SetupCommandAbbrs: [[[2
function! SetupCommandAbbrs(from, to)
  exec 'cnoreabbrev <expr> '.a:from
        \ .' ((getcmdtype() ==# ":" && getcmdline() ==# "'.a:from.'")'
        \ .'? ("'.a:to.'") : ("'.a:from.'"))'
endfunction
" NormalMapForEnter: <CR> [[[2
function! NormalMapForEnter()
    if &filetype ==# 'quickfix'
        return "\<CR>"
    else
        let line = trim(getline('.'))
        if index(['c', 'cpp', 'cs', 'css', 'java', 'rust', 'scss'], &filetype) >= 0
            if line != ''
                \ && index(['#', '/'], line[0]) < 0
                \ && index([';', '{','[', '(', '\'], line[-1:]) < 0
                    return "A;"
            else
                return ""
            endif
        elseif index(['json', 'jsonc'], &filetype) >=0
            if line != ''
                \ && index(['#', '/'], line[0]) < 0
                \ && index([',', '{','['], line[-1:]) < 0
                return "A,"
            else
                return ""
            endif
        else
            return "" " prevent entering to the next line
        endif
    endif
endfunction
" InsertMapForEnter: <CR> [[[2
function! InsertMapForEnter()
    let line = getline('.') " can not use trim
    if pumvisible()
        return "\<C-y>"
    elseif index([')', ']', '}'], strcharpart(line, getpos('.')[2]-1, 1)) >= 0
        return "\<CR>\<Esc>O"
    elseif strcharpart(line, getpos('.')[2]-1,2) == '</'
        return "\<CR>\<Esc>O"
    else
        return "\<CR>"
    endif
endfunction
" InsertMapForSemicolonEnter: ;<CR> [[[2
function! InsertMapForSemicolonEnter()
    let line = trim(getline('.'))
    if index(['c', 'cpp', 'cs', 'css', 'java', 'rust', 'scss'], &filetype) >= 0
        if line != '' && line[-1:] != ';' && index(['#', '/'], line[0]) < 0
            return "\<End>;\<CR>"
        else
            return "\<Esc>o"
        endif
    elseif index(['json', 'jsonc'], &filetype) >=0
        if line != ''
            \ && index(['#', '/'], line[0]) < 0
            \ && index([',', '{','['], line[-1:]) < 0
            return "\<End>,\<CR>"
        else
            return "\<Esc>o"
        endif
    else
        return "\<Esc>o"
    endif
endfunction
" InsertMapForSemicolonP: ;p [[[2
function! InsertMapForSemicolonP()
    if &filetype == 'python'
        let line = trim(getline('.'))
        if line != '' && line[-1:] != ':'
            return "\<End>:\<CR>"
        else
            return ""
        endif
    else
        return "\<End>\<Space>{}\<Left>\<CR>\<Esc>O"
    endif
endfunction
" InsertMapForDoubleSemicolon: ;; [[[2
function! InsertMapForDoubleSemicolon()
    let line = trim(getline('.'))
    if index(['c', 'cpp', 'cs', 'css', 'java', 'rust', 'scss'], &filetype) >= 0
        if line != '' && line[-1:] != ';' && index(['#', '/'], line[0]) < 0
            return "\<End>;"
        else
            return ""
        endif
    elseif &filetype == 'python'
        if trim(line) != '' && line[-1:] != ':'
            return "\<End>:"
        else
            return ""
        endif
    elseif index(['json', 'jsonc'], &filetype)
        if trim(line) != '' && line[-1:] != ','
            return "\<End>,"
        else
            return ""
        endif
    else
        return ""
    endif
endfunction
" MapForBackspace: <BS> [[[2
function! MapForBackspace()
    if col('.') == 1
        if line('.')  != 1
            return  "\<ESC>kA\<Del>"
        else
            return ""
        endif
    else
        let line = getline('.')         " 此处不能用 trim()
        let paren = strcharpart(line, getpos('.')[2]-2, 2)
        if index(['()', '[]', '{}', '<>', '%%', '$$', '**', '""', "''", '~~', '``'], paren) >=0
            return "\<Left>\<Del>\<Del>"
        else
            return "\<Left>\<Del>"
        endif
    endif
endfunction
" Random: [[[2
function! Rand(max) abort
  if has("reltime")
    let l:timerstr=reltimestr(reltime())
    let l:number=split(l:timerstr, '\.')[1]+0
  elseif has("win32") && &shell =~ 'cmd'
    let l:number=system("echo %random%")+0
  else
    " best effort, bash and zsh provide $RANDOM
    " cmd.exe on windows provides %random%, but expand()
    " does not seem to be able to expand this correctly.
    " In the worst case, this always returns zero
    let l:number=expand("$RANDOM")+0
  endif
  return l:number % a:max
endfunction
" Grep: [[[2
function! Grep(string)
    if executable('rg')
        execute "AsyncRun! rg -n " . a:string . " * "
        " execute "AsyncRun! -post=copen\ 8 rg -n " . a:string . " * "
    elseif has('win32') || has('win64')
        execute "AsyncRun! -cwd=<root> findstr /n /s /C:" . a:string
    else
        execute "AsyncRun! -cwd=<root> grep -n -s -R " . a:string . " * " . "--exclude='*.so' --exclude='.git' --exclude='.idea' --exclude='.cache' --exclude='.IntelliJIdea' --exclude='*.py[co]'"
    endif
endfunction
" ToggleTerminal: [[[2
function! ToggleTerminal(height, width)
  let found_winnr = 0
  for winnr in range(1, winnr('$'))
    if getbufvar(winbufnr(winnr), '&buftype') == 'terminal'
      let found_winnr = winnr
    endif
  endfor

  if found_winnr > 0
    if &buftype == 'terminal'
        " if current window is the terminal window, close it
        execute found_winnr . ' wincmd q'
    else
        " if current window is not terminal, go to the terminal window
        execute found_winnr . ' wincmd w'
    endif
  else
    let found_bufnr = 0
    for bufnr in filter(range(1, bufnr('$')), 'bufexists(v:val)')
      let buftype = getbufvar(bufnr, '&buftype')
      if buftype == 'terminal'
        let found_bufnr = bufnr
      endif
    endfor

    if g:terminal_type == 'floating'
      call s:openTermFloating(found_bufnr, a:height, a:width)
    else
      call s:openTermNormal(found_bufnr, a:height, a:width)
    endif
  endif
endfunction

function! s:openTermFloating(found_bufnr, height, width) abort
  let [row, col, vert, hor] = s:getWinPos(a:width, a:height)
  let opts = {
    \ 'relative': 'cursor',
    \ 'width': a:width,
    \ 'height': a:height,
    \ 'col': col,
    \ 'row': row,
    \ 'anchor': vert . hor,
    \ 'style': 'minimal'
  \ }

  if a:found_bufnr == 0
    let bufnr = nvim_create_buf(v:false, v:true)
    call nvim_open_win(bufnr, 1, opts)
    terminal
    autocmd TermClose <buffer> if &buftype=='terminal' | wincmd c | endif
  else
    call nvim_open_win(a:found_bufnr, 1, opts)
  endif

  setlocal winblend=30
  setlocal foldcolumn=1
  setlocal bufhidden=hide
  setlocal signcolumn=no
  setlocal nobuflisted
  setlocal nocursorline
  setlocal nonumber
  setlocal norelativenumber
endfunction

function! s:openTermNormal(found_bufnr, height, width)
  if a:found_bufnr > 0
    if &lines > 30
      execute 'botright ' . a:height . 'split'
      execute 'buffer ' . a:found_bufnr
    else
      botright split
      execute 'buffer ' . a:found_bufnr
    endif
  else
    if &lines > 30
      if has('nvim')
        execute 'botright ' . a:height . 'split term://' . &shell
      else
        botright terminal
        resize a:height
      endif
    else
      if has('nvim')
        execute 'botright split term://' . &shell
      else
        botright terminal
      endif
    endif
  endif
endfunction

function! s:getWinPos(width, height) abort
    let bottom_line = line('w0') + winheight(0) - 1
    let curr_pos = getpos('.')
    let rownr = curr_pos[1]
    let colnr = curr_pos[2]
    " a long wrap line
    if colnr > &columns
        let colnr = colnr % &columns
        let rownr += colnr / &columns
    endif

    if rownr + a:height <= bottom_line
        let vert = 'N'
        let row = 1
    else
        let vert = 'S'
        let row = 0
    endif

    if colnr + a:width <= &columns
        let hor = 'W'
        let col = 0
    else
        let hor = 'E'
        let col = 1
    endif

    return [row, col, vert, hor]
endfunction

" ToggleWindows: [[[2
function! ToggleWindows(winname)
    let found_winnr = 0

    for winnr in range(1, winnr('$'))
        let buftype = getbufvar(winbufnr(winnr), '&buftype')
        let filetype = getbufvar(winbufnr(winnr), '&filetype')
        " terminal window: &buftype is 'terminal' but &filetype is ''
        let window = filetype != "" ? filetype : buftype
        if window == a:winname
            let found_winnr = winnr
            " close other windows
        elseif g:only_one_win
            if index(keys(g:windows_toggle), window) >= 0
                execute g:windows_toggle[window]['close']
            elseif index(['leaderf'], window) >=0
                execute winnr . 'wincmd q'
            endif
        endif
    endfor

    if found_winnr > 0
        " close or go to that window(for example, terminal...)
        execute g:windows_toggle[a:winname]['close']
    else
        " open a new window or open that background buffer
        execute g:windows_toggle[a:winname]['open']
    endif
endfunction
" Abbreviate: [[[1
call SetupCommandAbbrs('as', 'AsyncRun')
call SetupCommandAbbrs('ass', 'AsyncStop')
call SetupCommandAbbrs('ca', 'CocAction')
call SetupCommandAbbrs('cc', 'CocConfig')
call SetupCommandAbbrs('cf', 'CocFix')
call SetupCommandAbbrs('ci', 'CocInstall')
call SetupCommandAbbrs('cm', 'CocCommand')
call SetupCommandAbbrs('cu', 'CocUninstall')
call SetupCommandAbbrs('cl', 'CocList')
call SetupCommandAbbrs('cr', 'CocRestart')
call SetupCommandAbbrs('d', 'Dict')
call SetupCommandAbbrs('gap', 'Git add -p')
call SetupCommandAbbrs('gd', 'Gvdiff')
call SetupCommandAbbrs('gl', 'Git lg')
call SetupCommandAbbrs('gs', 'Gstatus')
call SetupCommandAbbrs('gc', 'Gcommit -v')
call SetupCommandAbbrs('gca', 'Gcommit --amend -v')
call SetupCommandAbbrs('gco', 'AsyncRun git checkout .')
call SetupCommandAbbrs('gpush', 'AsyncRun git push')
call SetupCommandAbbrs('gpull', 'AsyncRun git pull')
call SetupCommandAbbrs('grm', 'Gremove')
"ddd"
call SetupCommandAbbrs('gmv', 'Gmove')
" PluginConfig: [[[1
" AsyncRun [[[2
" automatically open quickfix at height value g:quickfix_height
let g:asyncrun_open = g:quickfix_height
" 看到 Python 实时输出
let $PYTHONUNBUFFERED=1
" coc.nvim [[[2
inoremap <expr> <Tab>   pumvisible() ? "\<C-n>" : "\<Tab>"
inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"
" multi-cursor support
nmap <silent> <C-c> <Plug>(coc-cursors-word)
xmap <silent> <C-c> <Plug>(coc-cursors-range)
" snippets jump
let g:coc_snippet_next = '<tab>'

" 语法检查跳转
nmap <silent> <M-n> <Plug>(coc-diagnostic-next)
nmap <silent> <M-p> <Plug>(coc-diagnostic-prev)
" 定义声明实现跳转
nmap <silent> <Leader>cd <Plug>(coc-definition)
nmap <silent> <Leader>ci <Plug>(coc-implementation)
nmap <silent> <Leader>cf <Plug>(coc-fix-current)
nmap <silent> <Leader>cr <Plug>(coc-references)
nmap <silent> <Leader>cc :CocRestart<CR>
nmap <silent> <Leader>cl :CocList<CR>
nmap <silent> ,cr        :call CocAction('rename')<CR>
" coc-git
nmap <expr> <C-up>   &diff==1 ? '[c' : '<Plug>(coc-git-prevchunk)'
nmap <expr> <C-down> &diff==1 ? ']c' : '<Plug>(coc-git-nextchunk)'
nmap <expr> gk       &diff==1 ? '[c' : '<Plug>(coc-git-prevchunk)'
nmap <expr> gj       &diff==1 ? ']c' : '<Plug>(coc-git-nextchunk)'
nnoremap <silent> <Leader>hs :CocCommand git.chunkStage<CR>
nnoremap <silent> <Leader>hu :CocCommand git.chunkUndo<CR>
nnoremap <silent> <Leader>go :CocCommand git.browserOpen<CR>
nnoremap <silent> <Leader>gv :CocCommand git.chunkInfo<CR>
" coc-smartf
nmap f <Plug>(coc-smartf-forward)
nmap F <Plug>(coc-smartf-backward)

augroup Smartf
  autocmd User SmartfEnter :hi Conceal ctermfg=220 guifg=#6638F0
  autocmd User SmartfLeave :hi Conceal ctermfg=239 guifg=#504945
augroup end
" coc-translator
nmap <silent> ,, <Plug>(coc-translator-p)
xmap <silent> <Tab> <Plug>(coc-repl-sendtext)
" coc-bookmark
nmap <silent> ,b <Plug>(coc-bookmark-toggle)
nmap <silent> ,a <Plug>(coc-bookmark-annotate)
nmap <silent> gh <Plug>(coc-bookmark-prev)
nmap <silent> gl <Plug>(coc-bookmark-next)

" Install coc extensions
let g:coc_global_extensions = [
    \ 'coc-bookmark',
    \ 'coc-browser',
    \ 'coc-clock',
    \ 'coc-css',
    \ 'coc-diagnostic',
    \ 'coc-dictionary',
    \ 'coc-emoji',
    \ 'coc-emmet',
    \ 'coc-eslint',
    \ 'coc-git',
    \ 'coc-highlight',
    \ 'coc-html',
    \ 'coc-lists',
    \ 'coc-json',
    \ 'coc-marketplace',
    \ 'coc-pairs',
    \ 'coc-post',
    \ 'coc-prettier',
    \ 'coc-python',
    \ 'coc-rls',
    \ 'coc-smartf',
    \ 'coc-snippets',
    \ 'coc-syntax',
    \ 'coc-tag',
    \ 'coc-template',
    \ 'coc-todolist',
    \ 'coc-translator',
    \ 'coc-tslint-plugin',
    \ 'coc-tsserver',
    \ 'coc-vimtex',
    \ 'coc-vimlsp',
    \ 'coc-yank',
    \ 'coc-word',
    \ ]
call coc#add_extension()
if has('nvim')
highlight GitAdd                guifg=#00FF00 guibg=#232526
highlight GitModify             guifg=#00FFFF guibg=#232526
highlight GitDeleteTop          guifg=#FF2222 guibg=#232526
highlight GitDeleteButtom       guifg=#FF2222 guibg=#232526
highlight GitDeleteTopAndBottom guifg=#FF2222 guibg=#232526
endif
" codi.vim [[[2
let g:codi#interpreters = {
    \ 'python': {
        \ 'bin': 'python3',
        \ 'prompt': '^\(>>>\|\.\.\.\) '
    \ }
\ }
" defx.nvim [[[2
" from https://github.com/brglng/dotfiles/blob/master/vim/zpan/init/plugins/defx.vim
call defx#custom#option('_', {
      \ 'columns': 'mark:git:indent:icons:filename',
      \ 'winwidth': 30,
      \ 'split': 'floating',
      \ 'direction': 'topleft',
      \ 'show_ignored_files': 0,
      \ 'buffer_name': '',
      \ 'toggle': 1,
      \ 'resume': 0
      \ })

call defx#custom#column('mark', {
      \ 'readonly_icon': "",
      \ 'selected_icon': "",
      \ })

autocmd FileType defx call s:defx_my_settings()
" DefxMySettings: [[[3
function! s:defx_my_settings() abort
  setlocal nonumber
  setlocal listchars=
  setlocal foldcolumn=0
  setlocal noswapfile
  setlocal nolist
  setlocal nospell
  setlocal cursorline
  setlocal signcolumn=no

  " Define mappings
  nnoremap <silent><buffer><expr><nowait>   <CR>            defx#is_directory() ? defx#do_action('open_or_close_tree') : defx#do_action('multi', ['drop'])
  nnoremap <silent><buffer><expr><nowait>   <2-LeftMouse>   defx#is_directory() ? defx#do_action('open_or_close_tree') : defx#do_action('multi', ['drop'])
  nnoremap <silent><buffer><expr><nowait>   c               defx#do_action('copy')
  nnoremap <silent><buffer><expr><nowait>   m               defx#do_action('move')
  nnoremap <silent><buffer><expr><nowait>   p               defx#do_action('paste')
  nnoremap <silent><buffer><expr><nowait>   l               defx#do_action('open')
  nnoremap <silent><buffer><expr><nowait>   E               defx#do_action('open', 'vsplit')
  nnoremap <silent><buffer><expr><nowait>   P               defx#do_action('open', 'pedit')
  nnoremap <silent><buffer><expr><nowait>   o               defx#do_action('open_or_close_tree')
  nnoremap <silent><buffer><expr><nowait>   D               defx#do_action('new_directory')
  nnoremap <silent><buffer><expr><nowait>   N               defx#do_action('new_file')
  nnoremap <silent><buffer><expr><nowait>   M               defx#do_action('new_multiple_files')
  nnoremap <silent><buffer><expr><nowait>   C               defx#do_action('toggle_columns', 'mark:git:icons:filename:size:time')
  nnoremap <silent><buffer><expr><nowait>   S               defx#do_action('toggle_sort', 'time')
  nnoremap <silent><buffer><expr><nowait>   d               defx#do_action('remove_trash')
  nnoremap <silent><buffer><expr><nowait>   r               defx#do_action('rename')
  nnoremap <silent><buffer><expr><nowait>   !               defx#do_action('execute_command')
  nnoremap <silent><buffer><expr><nowait>   x               defx#do_action('execute_system')
  nnoremap <silent><buffer><expr><nowait>   y              defx#do_action('yank_path')
  nnoremap <silent><buffer><expr><nowait>   I               defx#do_action('toggle_ignored_files')
  nnoremap <silent><buffer><expr><nowait>   .               defx#do_action('repeat')
  nnoremap <silent><buffer><expr><nowait>   h           defx#do_action('cd', ['..'])
  nnoremap <silent><buffer><expr><nowait>   q               defx#do_action('quit')
  nnoremap <silent><buffer><expr><nowait>   <Space>         defx#do_action('toggle_select') . 'j'
  nnoremap <silent><buffer><expr><nowait>   *               defx#do_action('toggle_select_all')
  " nnoremap <silent><buffer><expr><nowait>   j               line('.') == line('$') ? 'gg' : 'j'
  " nnoremap <silent><buffer><expr><nowait>   k               line('.') == 1 ? 'G' : 'k'
  nnoremap <silent><buffer><expr><nowait>   f           defx#do_action('redraw')
endfunction
" fileheader.nvim [[[2
let g:fileheader_auto_add = 0
let g:fileheader_auto_update = 0
let g:fileheader_author='voldikss'
let g:fileheader_default_email = 'dyzplus@gmail'
let g:fileheader_show_email = 0
let g:fileheader_by_git_config = 1
let g:fileheader_new_line_at_end = 1
let g:fileheader_last_modified_by = 1
let g:fileheader_last_modified_time = 1
nnoremap <silent> <F1> :UpdateFileHeader<CR>
vnoremap <silent> <F1> <Esc>:UpdateFileHeader<CR>
inoremap <silent> <F1> <Esc>:UpdateFileHeader<CR>
" git-messenger.vim [[[2
" This line necessary to make vim-plug on-demand mode work
" Otherwise since git-messenger hasn't been loaded, <Leader>gm was not defined yet
nmap <Leader>gm <Plug>(git-messenger)
let g:git_messenger_include_diff = 'current'
let g:git_messenger_max_popup_height = 20
let g:git_messenger_max_popup_width = 100
" goyo.vim [[[2
let g:goyo_width = '50%'
let g:goyo_height = '100%'
let g:goyo_linenr = 1
" indentLine [[[2
let g:indentLine_enabled = 1
let g:indentLine_color_term = 238
let g:indentLine_fileTypeExclude = ['startify', 'vista', 'json', 'codi', 'defx', 'vtm']
" LeaderF [[[2
noremap <silent> <Leader>ff :LeaderfFile<CR>
noremap <silent> <Leader>fb :LeaderfBuffer<CR>
noremap <silent> <Leader>ft :LeaderfBufTagAll<CR>
noremap <silent> <Leader>fg :Leaderf rg<CR>
noremap <silent> <leader>fr :<C-U><C-R>=printf("Leaderf! gtags -r %s --auto-jump", expand("<cword>"))<CR><CR>
noremap <silent> <leader>fd :<C-U><C-R>=printf("Leaderf! gtags -d %s --auto-jump", expand("<cword>"))<CR><CR>
noremap <silent> <leader>fn :<C-U><C-R>=printf("Leaderf gtags --next %s", "")<CR><CR>
noremap <silent> <leader>fp :<C-U><C-R>=printf("Leaderf gtags --previous %s", "")<CR><CR>

let g:Lf_GtagsAutoGenerate = 1
let g:Lf_Gtagslabel = 'native-pygments'
let g:Lf_StlSeparator   = {'left': '', 'right': '', 'font': ''}
let g:Lf_RootMarkers    = ['.project', '.svn', '.git', '.idea']
let g:Lf_MruFileExclude = ['*.so','*.py[c0]','*.exe','*.sw?']
let g:Lf_WildIgnore = {
    \ 'dir': ['.svn','.git','.hg','.cache','.idea','.android','.gradle','.IntelliJIdea*'],
    \ 'file': ['*.sw?','~$*','*.exe','*.o','*.so','*.py[co]']
    \ }
let g:Lf_WorkingDirectoryMode = 'Ac'
let g:Lf_WindowHeight         = 0.30
let g:Lf_CacheDirectory       = expand('~/.cache/nvim')
let g:Lf_ShowRelativePath     = 1
let g:Lf_HideHelp             = 1
let g:Lf_ShowHidden           = 1
let g:Lf_PreviewResult        = {'Function':0, 'BufTag':0}
let g:Lf_IndexTimeLimit       = 10
let g:Lf_Ctags                = "/usr/local/bin/ctags"
" let g:Lf_PreviewCode = 1
let g:Lf_StlColorscheme = 'powerline'
let g:Lf_StlSeparator   = {'left': '⮀', 'right': '⮂', 'font': ''}
" lightline [[[2
" from https://github.com/brglng/dotfiles/blob/master/vim/zpan/init/plugins/lightline.vim
let g:lightline = {
    \ 'colorscheme': 'powerline',
    \ 'active': {
    \ 'left': [
        \ ['mode', 'paste'],
        \ ['fugitive', 'readonly', 'filename'],
        \ ['absolutepath']
    \ ],
    \ 'right': [
        \ ['asyncrun_status'],
        \ ['lineinfo'],
        \ ['percent'],
        \ ['cocstatus', 'fileformat', 'fileencoding'],
        \ ['filetype']
    \ ]
    \ },
    \ 'component': {
        \ 'lineinfo': ' %4l,%-3v',
        \ 'asyncrun_status': '%{g:asyncrun_status}',
        \ 'close': '%{has("nvim") ? " NVIM " : " VIM "}',
        \ 'vim_logo': "\ue7c5"
    \ },
    \ 'component_function': {
        \ 'mode': 'LightlineMode',
        \ 'fugitive': 'LightlineFugitive',
        \ 'cocstatus': 'coc#status',
        \ 'readonly': 'LightlineReadonly',
        \ 'filename': 'LightlineFilename',
        \ 'fileformat': 'LightlineFileFormat',
        \ 'fileencoding': 'LightlineFileEncoding',
        \ 'filetype': 'LightlineFiletype',
        \ 'absolutepath': 'LightlineAbsolutePath'
    \ },
    \ 'tabline': {
        \ 'left': [['vim_logo', 'buffers']],
        \ 'right': [['close']]
    \ },
    \ 'component_expand': {
        \ 'buffers': 'lightline#bufferline#buffers'
    \ },
    \ 'component_type': {
        \ 'buffers': 'tabsel'
    \ }
\ }

" LightlineAbsolutePath: [[[3
function! LightlineAbsolutePath()
    let path = substitute(expand('%:p'), $HOME, '~', 'g')
    if 2.6*len(path) > winwidth(0)
        let path = pathshorten(path)
    endif
    return path
endfunction

" LightlineMode: [[[3
function! LightlineMode()
  return &filetype ==# 'defx' ? 'Defx' :
        \ &filetype ==# 'denite' ? 'Denite' :
        \ &filetype ==# 'gitv' ? 'GitV' :
        \ &filetype ==# 'help' ? 'Help' :
        \ &filetype ==# 'man' ? 'Man' :
        \ &filetype ==# 'qf' && !getwininfo(win_getid(winnr()))[0]['loclist'] ? 'QuickFix' :
        \ &filetype ==# 'qf' && getwininfo(win_getid(winnr()))[0]['loclist'] ? 'Location List' :
        \ &filetype ==# 'startify' ? 'Startify' :
        \ &filetype ==# 'Mundo' ? 'Mundo' :
        \ expand('%:t') =~ '__Tagbar__' ? 'Tagbar' :
        \ expand('%:t') =~ '__vista__' ? 'Vista' :
        \ lightline#mode()
endfunction
" LightlineFilename: [[[3
function! LightlineFilename()
  let filename = &filetype ==# 'defx' ? '' :
        \ &filetype ==# 'denite' ? '' :
        \ &filetype ==# 'gitv' ? '' :
        \ &filetype ==# 'help' ? '' :
        \ &filetype ==# 'man' ? '' :
        \ &filetype ==# 'startify' ? '' :
        \ &filetype ==# 'Mundo' ? '' :
        \ expand('%:t') =~ '__Tagbar__\|__vista__' ? '' :
        \ expand('%:t') !=# '' ? expand('%:t') : '[No Name]'
  let modified = &modified ? ' ✎' : ''
  return filename . modified
endfunction
" LightlineFugitive: [[[3
function! LightlineFugitive()
  if exists('*fugitive#head') && &filetype !~# '\v(defx|denite|help|man|qf|tagbar|Mundo|vista)'
    let branch = fugitive#head()
    return branch !=# '' ? ''. branch : ''
  endif
  return ''
endfunction
" LightlineFileFormat: [[[3
function! LightlineFileFormat()
  return &filetype !=# 'defx' &&
        \ &filetype !=# 'denite' &&
        \ &filetype !=# 'gitv' &&
        \ &filetype !=# 'help' &&
        \ &filetype !=# 'man' &&
        \ &filetype !=# 'qf' &&
        \ &filetype !=# 'startify' &&
        \ &filetype != 'Mundo' &&
        \ expand('%:t') !~ '__Tagbar__\|__vista__' &&
        \ winwidth(0) > 70
        \ ? &fileformat : ''
endfunction
" LightlineFiletype: [[[3
function! LightlineFiletype()
  return &filetype !=# 'defx' &&
        \ &filetype !=# 'denite' &&
        \ &filetype !=# 'gitv' &&
        \ &filetype !=# 'help' &&
        \ &filetype !=# 'man' &&
        \ &filetype !=# 'qf' &&
        \ &filetype !=# 'startify' &&
        \ &filetype !=# 'Mundo' &&
        \ expand('%:t') !~ '__Tagbar__\|__vista__' &&
        \ winwidth(0) > 70 ? (strlen(&filetype) ? WebDevIconsGetFileTypeSymbol() . ' ' . &filetype : 'no ft') : ''
endfunction
" LightlineFileEncoding: [[[3
function! LightlineFileEncoding()
  return &filetype !=# 'defx' &&
        \ &filetype !=# 'denite' &&
        \ &filetype !=# 'gitv' &&
        \ &filetype !=# 'help' &&
        \ &filetype !=# 'man' &&
        \ &filetype !=# 'qf' &&
        \ &filetype !=# 'startify' &&
        \ &filetype !=# 'Mundo' &&
        \ expand('%:t') !~ '__Tagbar__\|__vista__' &&
        \ winwidth(0) > 70
        \ ? &fileencoding : ''
endfunction
" LightlineReadonly: [[[3
function! LightlineReadonly()
  return &readonly && &filetype !~# '\v(defx|denite|help|man|qf|startify)' && expand('%:t') !~ ('__Tagbar__\|__vista__') ? '' : ''
endfunction
" lightline-bufferline [[[2
let g:lightline#bufferline#unnamed = '[No Name]'
let g:lightline#bufferline#filename_modifier = ':t'
let g:lightline#bufferline#enable_devicons = 1
let g:lightline#bufferline#unicode_symbols = 1
let g:lightline#bufferline#show_number  = 3
let g:lightline#bufferline#number_map = {
      \ 0: '⁰', 1: '¹', 2: '²', 3: '³', 4: '⁴',
      \ 5: '⁵', 6: '⁶', 7: '⁷', 8: '⁸', 9: '⁹'
      \ }
nmap <Leader>1 <Plug>lightline#bufferline#go(1)
nmap <Leader>2 <Plug>lightline#bufferline#go(2)
nmap <Leader>3 <Plug>lightline#bufferline#go(3)
nmap <Leader>4 <Plug>lightline#bufferline#go(4)
nmap <Leader>5 <Plug>lightline#bufferline#go(5)
nmap <Leader>6 <Plug>lightline#bufferline#go(6)
nmap <Leader>7 <Plug>lightline#bufferline#go(7)
nmap <Leader>8 <Plug>lightline#bufferline#go(8)
nmap <Leader>9 <Plug>lightline#bufferline#go(9)
nmap <Leader>0 <Plug>lightline#bufferline#go(10)
" markdown-preview.nvim [[[2
let g:mkdp_auto_close = 0
" NeoDebug [[[2
let g:neodbg_keymap_continue           = '<F5>'   " run or continue
let g:neodbg_keymap_toggle_breakpoint  = '<F9>'   " toggle breakpoint on current line
let g:neodbg_keymap_step_into          = '<F10>' " step into
let g:neodbg_keymap_terminate_debugger = '<F12>'  " terminate debugger
" following are unuseful
let g:neodbg_keymap_run_to_cursor      = '<Nop1>' " run to cursor (tb and c)
let g:neodbg_keymap_jump               = '<Nop2>' " set next statement (tb and jump)
let g:neodbg_keymap_next               = '<Nop3>'  " next
let g:neodbg_keymap_step_out           = '<Nop4>' " setp out
let g:neodbg_keymap_print_variable     = '<Nop5>' " view variable under the cursor
let g:neodbg_keymap_stop_debugging     = '<Nop6>' " stop debugging (kill)
let g:neodbg_keymap_toggle_console_win = '<Nop7>' " toggle console window
noremap <silent> <F8> <Esc>:NeoDebug ./a.out<CR>
" python-syntax [[[2
let g:python_highlight_all = 1
let g:python_highlight_space_errors = 0
" sideways.vim [[[2
nnoremap <silent> <C-left>  :SidewaysLeft<CR>
nnoremap <silent> <C-right> :SidewaysRight<CR>
" sparkup [[[2
let g:sparkupExecuteMapping = '<C-i>'
" vim-argwrap [[[2
noremap <silent> <Leader>aw :ArgWrap<CR>
" vim-cpp-enhanced-highlight [[[2
let g:cpp_class_scope_highlight                  = 1
let g:cpp_member_variable_highlight              = 1
let g:cpp_class_decl_highlight                   = 1
let g:cpp_experimental_simple_template_highlight = 1
let g:cpp_concepts_highlight                     = 1
" vim-easy-align [[[2
xmap <silent> ga <Plug>(EasyAlign)
nmap <silent> ga <Plug>(EasyAlign)
" vim-exchange [[[2
nmap <silent> cx  <Plug>(Exchange)
xmap <silent> X   <Plug>(Exchange)
nmap <silent> cxc <Plug>(ExchangeClear)
nmap <silent> cxx <Plug>(ExchangeLine)
" vim-javascript [[[2
let g:javascript_plugin_jsdoc = 1
let g:javascript_plugin_ngdoc = 1
let g:javascript_plugin_flow  = 1
" vim-mark [[[2
" 和 visual-star-search 有 <Leader>* 冲突(MarkSet)
" 以及其他冲突
" 解除 <Leader>r
map <Plug>DisableMarkRegex         <Plug>MarkRegex
" 解除 <Leader>/
map <Plug>DisableMarkSearchAnyNext <Plug>MarkSearchAnyNext
" 解除 <Leader>?
map <Plug>DisableMarkSearchAnyPrev <Plug>MarkSearchAnyPrev
" 解除 <Leader>n
map <Plug>DisableMarkClear         <Plug>MarkClear
" 解除 */#
map <Plug>DisableMarkSearchNext    <Plug>MarkSearchNext
map <Plug>DisableMarkSearchPrev    <Plug>MarkSearchPrev
" 重新定义映射
map ms                             <Plug>MarkSet
map mn                             <Plug>MarkSearchCurrentNext
map mp                             <Plug>MarkSearchCurrentPrev
map mc                             <Plug>MarkAllClear
" vim-markdown [[[2
" 代码块高亮
let g:vim_markdown_fenced_languages = ['python=py']
let g:vim_markdown_fenced_languages = ['javascript=js']
let g:vim_markdown_fenced_languages = ['c=c']
" 避免标志符号被隐藏
let g:vim_markdown_conceal             = 0
let g:vim_markdown_conceal_code_blocks = 0
let g:tex_conceal                      = ""
let g:vim_markdown_math                = 1
" vim-move [[[2
let g:move_map_keys    = 0
let g:move_auto_indent = 1
vmap <silent> J <Plug>MoveBlockDown
vmap <silent> K <Plug>MoveBlockUp
nmap <silent> J <Plug>MoveLineDown
nmap <silent> K <Plug>MoveLineUp
" vim-mundo [[[2
let g:mundo_width              = 30
let g:mundo_preview_height     = 10
let g:mundo_right              = 0
let g:mundo_preview_bottom     = 1
let g:mundo_auto_preview_delay = 10
" vim-startify [[[2
noremap <silent> <Space> <Esc>:Startify<CR>
let g:startify_bookmarks = [
    \ {'v': '~/.vim/vimrc'},
    \ {'c': '~/.vim/coc-settings.json'}
\ ]
let g:startify_files_number = 8
let g:startify_padding_left = 15
let g:startify_custom_header = [
    \ '                      ___       ___       ___       ___       ___       ___       ___       ___   ',
    \ '                     /\__\     /\  \     /\__\     /\  \     /\  \     /\__\     /\  \     /\  \  ',
    \ '                    /:/ _/_   /::\  \   /:/  /    /::\  \   _\:\  \   /:/ _/_   /::\  \   /::\  \ ',
    \ '                   |::L/\__\ /:/\:\__\ /:/__/    /:/\:\__\ /\/::\__\ /::-"\__\ /\:\:\__\ /\:\:\__\',
    \ '                   |::::/  / \:\/:/  / \:\  \    \:\/:/  / \::/\/__/ \;:;-",-" \:\:\/__/ \:\:\/__/',
    \ '                    L;;/__/   \::/  /   \:\__\    \::/  /   \:\__\    |:|  |    \::/  /   \::/  / ',
    \ '                               \/__/     \/__/     \/__/     \/__/     \|__|     \/__/     \/__/  ']

" let g:startify_custom_header = [
"     \ '                      ██▒   █▓ ▒█████   ██▓    ▓█████▄  ██▓ ██ ▄█▀  ██████   ██████ ',
"     \ '                     ▓██░   █▒▒██▒  ██▒▓██▒    ▒██▀ ██▌▓██▒ ██▄█▒ ▒██    ▒ ▒██    ▒ ',
"     \ '                      ▓██  █▒░▒██░  ██▒▒██░    ░██   █▌▒██▒▓███▄░ ░ ▓██▄   ░ ▓██▄   ',
"     \ '                       ▒██ █░░▒██   ██░▒██░    ░▓█▄   ▌░██░▓██ █▄   ▒   ██▒  ▒   ██▒',
"     \ '                        ▒▀█░  ░ ████▓▒░░██████▒░▒████▓ ░██░▒██▒ █▄▒██████▒▒▒██████▒▒',
"     \ '                        ░ ▐░  ░ ▒░▒░▒░ ░ ▒░▓  ░ ▒▒▓  ▒ ░▓  ▒ ▒▒ ▓▒▒ ▒▓▒ ▒ ░▒ ▒▓▒ ▒ ░',
"     \ '                        ░ ░░    ░ ▒ ▒░ ░ ░ ▒  ░ ░ ▒  ▒  ▒ ░░ ░▒ ▒░░ ░▒  ░ ░░ ░▒  ░ ░',
"     \ '                          ░░  ░ ░ ░ ▒    ░ ░    ░ ░  ░  ▒ ░░ ░░ ░ ░  ░  ░  ░  ░  ░  ',
"     \ '                           ░      ░ ░      ░  ░   ░     ░  ░  ░         ░        ░  ',
"     \ '                          ░                     ░                                   ']
if has('nvim')
highlight StartifyHeader guifg=#FF00FF
highlight StartifyNumber guifg=#00FF00
highlight StartifyPath   guifg=#00AFFF
highlight StartifySlash  guifg=#DF875F
" highlight StartifyBracket  guifg=#585858
" highlight StartifyFooter   guifg=#585858
" highlight StartifySpecial  guifg=#0000FF
endif
" vim-table-mode [[[2
" for Markdown
let g:table_mode_corner = '|'
" vim-translate-me [[[2
nmap <silent>    ,t        <Plug>Translate
nmap <silent>    ,w        <Plug>TranslateW
nmap <silent>    ,r        <Plug>TranslateR
vmap <silent>    ,t        <Plug>TranslateV
vmap <silent>    ,w        <Plug>TranslateWV
vmap <silent>    ,r        <Plug>TranslateRV
" vimtex [[[2
let g:tex_flavor='latex'
let g:vimtex_view_method='zathura'
let g:vimtex_mappings_enabled = 0
let g:vimtex_fold_enabled = 1
let g:vimtex_quickfix_open_on_warning = 0
" let g:vimtex_quickfix_autoclose_after_keystrokes = 1
let g:vimtex_compiler_method = 'latexmk'
let g:vimtex_compiler_latexmk_engines = {'_': '-xelatex'}
let g:vimtex_compiler_latexrun_engines = {'_': 'xelatex'}
" NvimQt: [[[1
if exists('g:GuiLoaded')
    inoremap <S-CR> <Esc>o
    inoremap <C-CR> <Esc>O
    GuiFont! Monaco:h11
    GuiTabline 0
    GuiPopupmenu 0
    let g:GuiWindowMaximized = 1
endif
" WindowsOnly: [[[1
if has('win32') || has('win64')
    if !has('nvim')
        set pythonthreedll=D:\Applications\Python36\python36.dll
    endif
    if has('gui_running')
        inoremap <S-CR> <Esc>o
        inoremap <C-CR> <Esc>O
        set encoding=utf-8
        au GUIEnter * simalt ~x " 窗口启动时自动最大化
        set guioptions-=m       " 隐藏菜单栏
        set guioptions-=T       " 隐藏工具栏
        set guioptions-=L       " 隐藏左侧滚动条
        set guioptions-=r       " 隐藏右侧滚动条
        set guioptions-=b       " 隐藏底部滚动条
        set guifont=Monaco\ for\ Powerline:h10
        " set guifont=DejaVu\ Sans\ Mono\ for\ Powerline:h11:b
        source $VIMRUNTIME/delmenu.vim
        source $VIMRUNTIME/menu.vim
        language messages zh_CN.utf-8
    endif
endif
