" vim:fdm=marker:fmr=[[[,]]]
" ========================================================================
" Description: vimrc
" Author: voldikss
" GitHub: https://github.com/voldikss/dotfiles
" Todo:
" - let <Space> as a prefix key
" ========================================================================

" GlobalVariables: [[[1
" IndentCont: indent count when type <CR> and then \
let g:vim_indent_cont = 2
" QuickfixHeight:
let g:quickfix_height = 9
" ToggleWindows:
let g:only_one_win = 1
let g:windows_toggle = {
  \ 'defx': {
    \ 'open': 'Defx',
    \ 'close': 'Defx'
  \ },
  \ 'vista': {
    \ 'open':'Vista',
    \ 'close': 'Vista!'
  \ },
  \ 'qf': {
    \ 'open': 'OpenQf',
    \ 'close': 'cclose'
  \ },
  \ 'Mundo': {
    \ 'open': 'MundoToggle',
    \ 'close': 'MundoToggle'
  \ },
  \ 'terminal': {
    \ 'open': 'FloatermToggle',
    \ 'close': 'FloatermToggle'
  \ }
\ }
" DontLoad: [[[2
let g:loaded_2html_plugin      = 1
let g:loaded_logiPat           = 1
let g:loaded_getscriptPlugin   = 1
let g:loaded_gzip              = 1
let g:loaded_man               = 1
let g:loaded_rrhelper          = 1
let g:loaded_shada_plugin      = 1
let g:loaded_spellfile_plugin  = 1
let g:loaded_tarPlugin         = 1
let g:loaded_tutor_mode_plugin = 1
let g:loaded_vimballPlugin     = 1
let g:loaded_zipPlugin         = 1
" PythonHost: [[[2
if has('win32') || has('win64') || has('win32unix')
  let g:python3_host_prog='D:/Applications/Python36/python.exe'
else
  let g:python3_host_prog='/usr/bin/python3'
endif
" NeoVimTerminalColors: [[[2
let g:terminal_color_0  = '#282828'
let g:terminal_color_1  = '#cc241d'
let g:terminal_color_2  = '#00ffff'
let g:terminal_color_3  = '#d79921'
let g:terminal_color_4  = '#458588'
let g:terminal_color_5  = '#b16286'
let g:terminal_color_6  = '#689d6a'
let g:terminal_color_7  = '#a89984'
let g:terminal_color_8  = '#928374'
let g:terminal_color_9  = '#fb4934'
let g:terminal_color_10 = '#00df5f'
let g:terminal_color_11 = '#fabd2f'
let g:terminal_color_12 = '#00afff'
let g:terminal_color_13 = '#d3869b'
let g:terminal_color_14 = '#8ec07c'
let g:terminal_color_15 = '#ebdbb2'
" PluginLoad: [[[1
if &compatible
  set nocompatible
endif
set runtimepath+=~/.cache/dein/repos/github.com/Shougo/dein.vim
if dein#load_state('~/.cache/dein')
call dein#begin('~/.cache/dein')
call dein#add('~/.cache/dein/repos/github.com/Shougo/dein.vim')
call dein#add('octol/vim-cpp-enhanced-highlight')
call dein#add('othree/html5.vim')
call dein#add('plasticboy/vim-markdown')
call dein#add('pangloss/vim-javascript')
call dein#add('vim-python/python-syntax')
call dein#add('HerringtonDarkholme/yats.vim')
call dein#add('lervag/vimtex')
call dein#add('cpiger/NeoDebug', {'on_ft': ['c', 'cpp']})
call dein#add('iamcco/markdown-preview.nvim', {
  \ 'on_ft': ['markdown', 'pandoc.markdown', 'rmd'],
  \ 'build': 'cd app & yarn install',
  \ 'frozen': 1
\ })
call dein#add('jaxbot/browserlink.vim', {'on_ft': ['html', 'htmldjango', 'css']})
call dein#add('alvan/vim-closetag', {'on_ft': ['html', 'xml', 'htmldjango']})
call dein#add('numirias/semshi', {'on_ft': 'python'})
" Completion [[[2
call dein#add('neoclide/coc.nvim', {
  \ 'merged': 0,
  \ 'build': 'yarn install --frozen-lockfile'
\ })
" Style [[[2
call dein#add('Yggdroot/indentLine')
call dein#add('Shougo/defx.nvim', {'merged': 0})
call dein#add('roxma/nvim-yarp', {'if': !has('nvim')})
call dein#add('roxma/vim-hug-neovim-rpc', {'if': !has('nvim')})
call dein#add('kristijanhusak/defx-git')
call dein#add('kristijanhusak/defx-icons')
call dein#add('mhinz/vim-startify', {'on_cmd': 'Startify'})
call dein#add('ryanoasis/vim-devicons')
call dein#add('itchyny/lightline.vim')
call dein#add('mengelbrecht/lightline-bufferline')
call dein#add('simnalamburt/vim-mundo', {'on_cmd': 'MundoToggle'})
call dein#add('kshenoy/vim-signature')
call dein#add('guns/xterm-color-table.vim', {'on_cmd': 'XtermColorTable'})
" Git [[[2
call dein#add('tpope/vim-fugitive')
call dein#add('cohama/agit.vim', {'on_cmd': 'Agit'})
call dein#add('mattn/gist-vim', {'on_cmd': 'Gist'})
call dein#add('mattn/webapi-vim')
call dein#add('rhysd/git-messenger.vim', {'on_map': '<Plug>'})
" Enhancements [[[2
call dein#add('skywind3000/asyncrun.vim', {'on_cmd': ['AsyncRun', 'AsyncStop']})
call dein#add('Yggdroot/LeaderF', {
  \ 'on_cmd': 'Leaderf',
  \ 'build': expand('./install'.(has('win64') ? '.bat': '.sh'))
  \ })
call dein#add('rhysd/reply.vim', {
  \   'lazy' : 1,
  \   'on_cmd' : ['Repl', 'ReplAuto'],
  \ })
call dein#add('voldikss/vim-search-me')
" call dein#add('voldikss/vim-codelf')
call dein#add('voldikss/vim-translate-me', {'on_map': ['<Plug>TranslateW', '<Plug>Translate']})
call dein#add('voldikss/vim-floaterm', {'on_cmd': 'FloatermToggle'})
call dein#add('voldikss/vim-hello-word', {'on_cmd': ['HelloWord', 'HelloWordSetVocabulary']})
call dein#add('lfv89/vim-interestingwords', {
  \ 'on_func': ['InterestingWords', 'UncolorAllWords', 'WordNavigation']
\ })
call dein#add('liuchengxu/vista.vim', {'on_cmd': 'Vista'})
call dein#add('tommcdo/vim-exchange', {'on_map': '<Plug>(Exchange'})
call dein#add('matze/vim-move', {'on_map': '<Plug>Move'})
call dein#add('andrewradev/sideways.vim', {'on_cmd': ['SidewaysLeft', 'SidewaysRight']})
call dein#add('tpope/vim-commentary')
call dein#add('tpope/vim-surround')
call dein#add('tpope/vim-repeat')
call dein#add('foosoft/vim-argwrap', {'on_cmd': 'ArgWrap'})
call dein#add('junegunn/vim-easy-align', {'on_map': '<Plug>(EasyAlign)'})
call dein#add('wellle/targets.vim')
call dein#add('yianwillis/vimcdoc')
call dein#add('metakirby5/codi.vim', {'on_cmd': 'Codi'})
call dein#end()
call dein#save_state()
endif
filetype plugin indent on
syntax enable
" General: [[[1
" file & directory & format [[[2
set history=2000
set pumheight=15
set updatetime=100
set autoread
set autowrite
set nobackup
set noswapfile
set nowritebackup
set undodir=~/.cache/nvim/undo_dir/
set undofile
set isfname-==
set encoding=utf-8
set fileencodings=utf-8,cp936,gb18030,big5,euc-jp,euc-kr,latin1
set fileformats=unix,dos,mac
set nrformats=
set hidden
set fileignorecase
set formatoptions+=m
set formatoptions+=B
set dictionary+=~/.vim/dict/dictionary.txt
set nospell
set spellfile=~/.vim/spell/en.utf-8.add
" key [[[2
set ttimeout
set timeoutlen=500
set ttimeoutlen=20
set mouse-=a
set selectmode=mouse
set clipboard=
set backspace=2
set backspace=eol,start,indent
set whichwrap=b,s,<,>,[,]
set completeopt-=preview
set modeline
" style [[[2
set termguicolors
set guicursor=
set pumheight=15
set title
set ruler
set cursorline
set laststatus=2
set showtabline=2
set guioptions-=e
set shortmess+=c
set shortmess-=S
set scrolloff=6
colorscheme srcery
" match & search [[[2
set showmatch
set matchtime=0
set matchpairs+=<:>
set matchpairs+=《:》
set matchpairs+=（:）
set matchpairs+=【:】
set matchpairs+=“:”
set matchpairs+=‘:’
set hlsearch
set incsearch
set ignorecase
set smartcase
" tab & space & indent [[[2
set tabstop=4
set shiftwidth=4
set softtabstop=4
set smarttab
set expandtab
set shiftround
set relativenumber number
set foldlevel=99
set foldmethod=indent
set conceallevel=0
set autoindent
set smartindent
set cpoptions+=I
" command window [[[2
set wildmenu
set wildmode=longest,full
set wildignorecase
set wildignore+=.stversions,*.pyc,*.spl,*.o,*.out,*~,%*
set wildignore+=*.jpg,*.jpeg,*.png,*.gif,*.zip,**/tmp/**,*.DS_Store
set wildignore+=__pycache__,*.egg-info
" nvim only [[[2
if has('nvim') &&  matchstr(execute('silent version'), 'NVIM v\zs[^\n-]*') >= '0.4.0'
set inccommand=nosplit
set wildoptions+=pum
set signcolumn=yes:2
set pumblend=10
endif
" Keymap: [[[1
" LeaderKey: [[[2
let mapleader   = ';'
let g:mapleader = ';'
" General: [[[2
noremap  H  ^
noremap  L  $
" Esc
inoremap <C-c> <C-R>=util#keymapfunc#Esc()<CR>
inoremap <C-[> <C-R>=util#keymapfunc#Esc()<CR>
inoremap <Esc> <C-r>=util#keymapfunc#Esc()<CR>
"cannot use noremap
nnoremap     M  %
vnoremap     M  %
noremap  U  <C-R>
noremap  '  `
vnoremap <  <gv
vnoremap >  >gv
noremap <C-U> kkkkkkkkkkkkkkkkkkkkk
noremap <C-D> jjjjjjjjjjjjjjjjjjjjj
" Jump: [[[2
noremap <silent> <C-j>      <C-]>
noremap <silent> <C-W><C-j> <C-W><C-]>
noremap <silent> <C-k>      :<C-u>call util#showDoc()<CR>
" Search: [[[2
" use set shortmess-=S to display searchindex
nnoremap <silent> n  nzz
nnoremap <silent> N  Nzz
nnoremap <silent> *  *zz
nnoremap <silent> #  #zz
xnoremap * :<C-u>call util#visualStarSearchSet('/')<CR>/<C-R>=@/<CR><CR>
xnoremap # :<C-u>call util#visualStarSearchSet('?')<CR>?<C-R>=@/<CR><CR>
" TextObject: [[[2
" whole buffer
xnoremap ie GoggV
onoremap ie :normal vie<CR>
" line
xnoremap il g_o^
onoremap il :normal vil<CR>
xnoremap al $o0
onoremap al :normal val<CR>
" argument
xmap ia afovvi)
omap ia :normal vag<CR>
" Diff: [[[2
if &diff == 1
  vmap <silent> <buffer> dg :diffget<CR>
  vmap <silent> <buffer> dp :diffput<CR>
  nmap <silent> <buffer> dg V:diffget<CR>
  nmap <silent> <buffer> dp V:diffput<CR>
endif
" BufferOperation: [[[2
nmap     <silent> -         :Explore<CR>
nnoremap <silent> <C-h>     :bprev<CR>
nnoremap <silent> <C-l>     :bnext<CR>
noremap  <silent> <Leader>d :bdelete!<CR>
" TabOperation: [[[2
noremap  <silent> <C-t> <Esc>:tabnew<CR>
" TextCopy: [[[2
nnoremap Y y$
nnoremap <Leader>y "+yy
vnoremap <Leader>y "+y
nnoremap <Leader>Y "+y$
nnoremap <Leader>p "+p
nnoremap <Leader>P "+P
" InsertMode: move [[[2
inoremap <C-k> <Up>
inoremap <C-j> <Down>
snoremap <C-j> <Down>
inoremap <C-h> <Left>
inoremap <C-l> <Right>
inoremap <C-b> <Esc>bi
inoremap <C-f> <Esc>ea
inoremap <C-a> <Esc>I
inoremap <C-e> <End>
inoremap <C-o> <End><CR>
inoremap <M-o> <Esc>O
inoremap <C-d> <Esc>ddi
" SaveAndQuit: [[[2
nnoremap <silent> <Leader>w :wa<CR>
nnoremap <silent> <Leader>q :q<CR>
nnoremap <silent> <Leader>Q :qa!<CR>
nnoremap <silent> Q         :qa!<CR>
" QuickMessage: [[[2
nnoremap <silent> <Leader>m :messages<CR>
nnoremap <silent> <Leader>t :TabMessage messages<CR>
" CommandMode: [[[2
cnoremap <C-a> <Home>
cnoremap <C-e> <End>
cnoremap <C-p> <Up>
cnoremap <C-n> <Down>
cnoremap <C-b> <S-Left>
cnoremap <C-f> <S-Right>
" TerminalMode: [[[2
tnoremap <Esc>  <C-\><C-n>
if has('win32') || has('win64')
  nnoremap <silent> <Leader>n :vert term<CR>
  nnoremap <silent> ,n        :term<CR>
else
  nnoremap <silent> <Leader>n :vsplit term://zsh<CR>
  nnoremap <silent> ,n        :edit term://zsh<CR>
endif
" WindowOperation: [[[2
if has('nvim')
  nnoremap <M-h> <C-w>h
  nnoremap <M-j> <C-w>j
  nnoremap <M-k> <C-w>k
  nnoremap <M-l> <C-w>l
  inoremap <M-h> <Esc><C-w>h
  inoremap <M-j> <Esc><C-w>j
  inoremap <M-k> <Esc><C-w>k
  inoremap <M-l> <Esc><C-w>l
  tnoremap <M-h> <C-\><C-n><C-w>h
  tnoremap <M-j> <C-\><C-n><C-w>j
  tnoremap <M-k> <C-\><C-n><C-w>k
  tnoremap <M-l> <C-\><C-n><C-w>l
  cnoremap <expr> <C-n>  pumvisible() ? '<Right>' : '<Down>'
  cnoremap <expr> <C-p>  pumvisible() ? '<Left>' : '<Up>'
  cnoremap <expr> <Up>   pumvisible() ? '<C-p>' : '<up>'
  cnoremap <expr> <Down> pumvisible() ? '<C-n>' : '<down>'
endif
" WindowSize: [[[2
if has('nvim')
  noremap <M-up>    <C-w>+
  noremap <M-down>  <C-w>-
  noremap <M-left>  <C-w>5<
  noremap <M-right> <C-w>5>
endif
" ClearnSearchHighlight:  [[[2
if has('nvim')
  nnoremap <Esc>      <Cmd>nohlsearch<bar>echo ''<CR>
endif
nnoremap <silent> <BS> :noh<bar>echo ''<CR>
" Customized function [[[2
noremap  <silent> <F2>            <Esc>:call util#toggleWindows('defx')<CR>
noremap! <silent> <F2>            <Esc>:call util#toggleWindows('defx')<CR>
tnoremap <silent> <F2>            <C-\><C-n>:call util#toggleWindows('defx')<CR>
noremap  <silent> <F3>            <Esc>:call util#toggleWindows('Mundo')<CR>
noremap! <silent> <F3>            <Esc>:call util#toggleWindows('Mundo')<CR>
tnoremap <silent> <F3>            <C-\><C-n>:call util#toggleWindows('Mundo')<CR>
noremap  <silent> <F4>            <Esc>:call util#openFileExplore()<CR>
noremap  <silent> <F5>            <Esc>:call util#quickRun()<CR>
noremap! <silent> <F5>            <Esc>:call util#quickRun()<CR>
noremap  <silent> <Leader>x       <Esc>:call util#quickRun()<CR>
noremap  <silent> <Leader><Space> <Esc>:call util#toggleWindows('qf')<CR>
tnoremap <silent> <Leader><Space> <C-\><C-n>:call util#toggleWindows('qf')<CR>
noremap  <silent> <F6>            <Esc>:call util#autoFormat()<CR>
noremap  <silent> ;;              <Esc>:call util#autoFormat()<CR>
noremap! <silent> <F6>            <Esc>:call util#autoFormat()<CR>
noremap  <silent> <F10>           <Esc>:call util#toggleWindows('vista')<CR>
noremap! <silent> <F10>           <Esc>:call util#toggleWindows('vista')<CR>
tnoremap <silent> <F10>           <C-\><C-n>:call util#toggleWindows('vista')<CR>
noremap  <silent> <expr><F12>     &buftype =='terminal' ?
                                  \ "\<C-\><C-n>:call util#toggleWindows('terminal')\<CR>" :
                                  \ "\<Esc>:call util#toggleWindows('terminal')\<CR>i<C-u>"
noremap! <silent> <F12>           <Esc>:call util#toggleWindows('terminal')<CR>i
tnoremap <silent> <F12>           <C-\><C-n>:call util#toggleWindows('terminal')<CR>
nnoremap <expr>   <CR>            util#keymapfunc#normalMapForCR() . "\<Esc>"
inoremap <expr>   <CR>            util#keymapfunc#insertMapForCR()
inoremap <expr>   <BS>            util#keymapfunc#insertMapForBS()
" Autocmd: [[[1
augroup AutocmdGroup
  autocmd!
  " General: [[[2
  if has('nvim')
    autocmd TermOpen *
      \ setlocal signcolumn=no |
      \ setlocal nobuflisted |
      \ setlocal nospell |
      \ nmap <silent><buffer> <Esc> :hide<CR>
  endif
  " ParenthesisColor: [[[2
  autocmd VimEnter,BufWinEnter *
    \ if index(['html', 'htmldjango', 'tex', 'mma'], &filetype) < 0 |
      \ syntax match paren1 /[{}]/   | hi paren1 guifg=#FF00FF |
      \ syntax match paren2 /[()]/   | hi paren2 guifg=#DF8700 |
      \ syntax match paren3 /[<>]/   | hi paren3 guifg=#0087FF |
      \ syntax match paren4 /[\[\]]/ | hi paren4 guifg=#00FF5F |
    \ endif
  " AutoSaveBuffer: [[[2
  autocmd FocusLost,InsertLeave * call util#autoSave()
  " DisableAutoComment: [[[2
  autocmd FileType * set formatoptions-=cro
  " LineNumber: [[[2
  autocmd BufEnter,FocusGained,InsertLeave,WinEnter * if &nu | set rnu   | endif
  autocmd BufLeave,FocusLost,InsertEnter,WinLeave   * if &nu | set nornu | endif
  " EqualWindowsSize: [[[2
  autocmd VimResized * exec "normal \<C-w>="
  " LastPosition: [[[2
  autocmd BufReadPost *
    \ if line("'\"") > 1 && line("'\"") <= line("$") |
      \ exe "normal! g'\"" |
    \ endif
  " KeywordHighlight: [[[2
  autocmd Syntax *
    \ call matchadd('Todo',  '\W\zs\(TODO\|FIXME\|CHANGED\|XXX\|BUG\|HACK\)') |
    \ call matchadd('Todo',  '\W\zs\(NOTE\|Note\|INFO\|IDEA\|NOTICE\)') |
    \ call matchadd('Debug', '\W\zs\(Debug\|DEBUG\)') |
  " AutoChdir: [[[2
  autocmd BufEnter * silent! lcd %:p:h
  " GitIgnore: [[[2
  autocmd BufNewFile .gitignore CocCommand template.templateTop
augroup END
" Command: [[[1
" Commons: [[[2
command! -nargs=+ Grep               call util#grep(<q-args>)
command! -nargs=0 SetQuickRunCommand call util#setQuickRunCmd()
command! -nargs=0 OpenQf             execute 'copen' .  g:quickfix_height
command! -nargs=+ -complete=command  TabMessage call util#tabMessage(<q-args>)
" GitOperation: [[[2
command! Gap  Git add -p
command! Gd   Gvdiff
command! Gl   Git lg
command! Gs   Gstatus
command! Gc   Gcommit -v
command! Gca  Gcommit -a -v
command! Gcaa Gcommit --amend -a -v
command! Gco  execute "AsyncRun git checkout ."
" VimPlug: [[[2
command! PI  call dein#update()
command! PU  call dein#update()
" Abbreviate: [[[1
function! SetupCommandAbbrs(from, to)
  exec 'cnoreabbrev <expr> '.a:from
    \ .' ((getcmdtype() ==# ":" && getcmdline() ==# "'.a:from.'")'
    \ .'? ("'.a:to.'") : ("'.a:from.'"))'
endfunction
call SetupCommandAbbrs('as', 'AsyncRun')
call SetupCommandAbbrs('ass', 'AsyncStop')
call SetupCommandAbbrs('ca', 'CocAction')
call SetupCommandAbbrs('cc', 'CocConfig')
call SetupCommandAbbrs('cf', 'CocFix')
call SetupCommandAbbrs('ci', 'CocInstall')
call SetupCommandAbbrs('cm', 'CocCommand')
call SetupCommandAbbrs('cs', 'CocSearch')
call SetupCommandAbbrs('cu', 'CocUninstall')
call SetupCommandAbbrs('cl', 'CocList')
call SetupCommandAbbrs('cr', 'CocRestart')
call SetupCommandAbbrs('gap', 'Git add -p')
call SetupCommandAbbrs('gd', 'Gvdiff')
call SetupCommandAbbrs('gl', 'Git lg')
call SetupCommandAbbrs('gs', 'Gstatus')
call SetupCommandAbbrs('gc', 'Gcommit -v')
call SetupCommandAbbrs('gca', 'Gcommit --amend -v')
call SetupCommandAbbrs('gco', 'AsyncRun git checkout .')
call SetupCommandAbbrs('gpush', 'AsyncRun git push')
call SetupCommandAbbrs('gpull', 'AsyncRun git pull')
call SetupCommandAbbrs('sl', 'CocCommand session.load default')
call SetupCommandAbbrs('ss', 'CocCommand session.save default')
call SetupCommandAbbrs('tm', 'TabMessage')
" PluginConfig: [[[1
" AsyncRun [[[2
let g:asyncrun_status = ''  " asyncrun is lazy loaded
" automatically open quickfix at height value g:quickfix_height
let g:asyncrun_open = g:quickfix_height
" 看到 Python 实时输出
let $PYTHONUNBUFFERED=1
" coc.nvim [[[2
let g:coc_snippet_next = '<tab>'
inoremap <expr> <Tab>   pumvisible() ? "\<C-n>" : "\<Tab>"
inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"
autocmd User CocStatusChange,CocDiagnosticChange call lightline#update()
nmap <silent> <C-c> <Plug>(coc-cursors-word)
xmap <silent> <C-c> <Plug>(coc-cursors-range)
nmap <silent> <M-n> <Plug>(coc-diagnostic-next)
nmap <silent> <M-p> <Plug>(coc-diagnostic-prev)
nmap <silent> <Leader>ca :CocAction<CR>
nmap <silent> <Leader>cd <Plug>(coc-definition)
nmap <silent> <Leader>ci <Plug>(coc-implementation)
nmap <silent> <Leader>cf <Plug>(coc-fix-current)
nmap <silent> <Leader>cr <Plug>(coc-references)
nmap <silent> <Leader>cc :CocRestart<CR>
nmap <silent> <Leader>cl :CocList<CR>
nmap <silent> ,cr        :call CocAction('rename')<CR>
autocmd BufReadPre * call util#toggleCoc()
" coc-git
nmap <expr> <C-up>   &diff==1 ? '[c' : '<Plug>(coc-git-prevchunk)'
nmap <expr> <C-down> &diff==1 ? ']c' : '<Plug>(coc-git-nextchunk)'
nmap <expr> gk       &diff==1 ? '[c' : '<Plug>(coc-git-prevchunk)'
nmap <expr> gj       &diff==1 ? ']c' : '<Plug>(coc-git-nextchunk)'
nnoremap <silent> <Leader>hs :CocCommand git.chunkStage<CR>
nnoremap <silent> <Leader>hu :CocCommand git.chunkUndo<CR>
nnoremap <silent> <Leader>go :CocCommand git.browserOpen<CR>
nnoremap <silent> <Leader>gv :CocCommand git.chunkInfo<CR>
omap ic <Plug>(coc-text-object-inner)
xmap ic <Plug>(coc-text-object-inner)
" coc-pairs
let g:coc_pairs_expand = [['（', '）'], ['“', '”'], ['‘', '’'], ['《', '》']]
inoremap <silent> <M-]> <C-R>=util#keymapfunc#moveOutPairs(']')<CR>
inoremap <silent> <M-}> <C-R>=util#keymapfunc#moveOutPairs('}')<CR>
inoremap <silent> <M-)> <C-R>=util#keymapfunc#moveOutPairs(')')<CR>
" coc-smartf
" nmap f <Plug>(coc-smartf-forward)
" nmap F <Plug>(coc-smartf-backward)
" autocmd User SmartfEnter :hi Conceal ctermfg=220 guifg=#6638F0
" autocmd User SmartfLeave :hi Conceal ctermfg=239 guifg=#504945
" coc-bookmark
nmap <silent> ,b <Plug>(coc-bookmark-toggle)
nmap <silent> ,a <Plug>(coc-bookmark-annotate)
nmap <silent> gh <Plug>(coc-bookmark-prev)
nmap <silent> gl <Plug>(coc-bookmark-next)
" coc extensions
let g:coc_global_extensions = [
  \ 'coc-bookmark',
  \ 'coc-browser',
  \ 'coc-clock',
  \ 'coc-css',
  \ 'coc-diagnostic',
  \ 'coc-dictionary',
  \ 'coc-emoji',
  \ 'coc-emmet',
  \ 'coc-eslint',
  \ 'coc-explorer',
  \ 'coc-git',
  \ 'coc-highlight',
  \ 'coc-html',
  \ 'coc-lists',
  \ 'coc-json',
  \ 'coc-marketplace',
  \ 'coc-pairs',
  \ 'coc-post',
  \ 'coc-prettier',
  \ 'coc-python',
  \ 'coc-rls',
  \ 'coc-snippets',
  \ 'coc-syntax',
  \ 'coc-tag',
  \ 'coc-template',
  \ 'coc-todolist',
  \ 'coc-translator',
  \ 'coc-tslint-plugin',
  \ 'coc-tsserver',
  \ 'coc-vimtex',
  \ 'coc-vimlsp',
  \ 'coc-yank',
  \ 'coc-word'
\ ]
if matchstr(&rtp, 'coc.nvim') != ''
  call coc#add_extension()
endif
if has('nvim')
  let sclbg = matchstr(execute('hi SignColumn'), 'guibg=\zs\S*')
  exe 'highlight GitAdd                guifg=#00FF00 guibg=' . sclbg
  exe 'highlight GitModify             guifg=#00FFFF guibg=' . sclbg
  exe 'highlight GitDeleteTop          guifg=#FF2222 guibg=' . sclbg
  exe 'highlight GitDeleteButtom       guifg=#FF2222 guibg=' . sclbg
  exe 'highlight GitDeleteTopAndBottom guifg=#FF2222 guibg=' . sclbg
  unlet sclbg
endif
" codi.vim [[[2
let g:codi#interpreters = {
  \ 'python': {
    \ 'bin': 'python3',
    \ 'prompt': '^\(>>>\|\.\.\.\) '
  \ }
\ }
" defx.nvim [[[2
autocmd BufLeave * if &filetype == 'defx' | Defx | endif
autocmd FileType defx call util#defxSettings()
if matchstr(&rtp, 'defx.nvim') != ''
  call defx#custom#option('_', {
    \ 'columns': 'mark:git:indent:icons:filename',
    \ 'winwidth': 30,
    \ 'split': 'floating',
    \ 'direction': 'topleft',
    \ 'show_ignored_files': 1,
    \ 'buffer_name': '',
    \ 'toggle': 1,
    \ 'resume': 0
  \ })
  call defx#custom#column('mark', {
    \ 'readonly_icon': "",
    \ 'selected_icon': ""
  \ })
endif
" git-messenger.vim [[[2
" This line necessary to make vim-plug on-demand mode work
" Otherwise since git-messenger hasn't been loaded, <Leader>gm was not defined yet
nmap <Leader>gm <Plug>(git-messenger)
let g:git_messenger_include_diff = 'current'
let g:git_messenger_max_popup_height = 20
let g:git_messenger_max_popup_width = 100
" indentLine [[[2
let g:indentLine_char = '│'
" let g:indentLine_char = '.'
let g:indentLine_enabled = 1
let g:indentLine_color_term = 238
let g:indentLine_fileTypeExclude = ['startify', 'vista', 'json', 'codi', 'defx', 'vtm', 'jsonc']
" LeaderF [[[2
nmap <silent> <Leader>ff :Leaderf file<CR>
nmap <silent> <Leader>fb :Leaderf buffer<CR>
nmap <silent> <Leader>fm :Leaderf mru<CR>
nmap <silent> <Leader>fg :Leaderf rg<CR>
nmap <silent> <Leader>ft :LeaderfBufTagAll<CR>
noremap <silent> <Leader>fr :<C-U><C-R>=printf("Leaderf! gtags -r %s --auto-jump", expand("<cword>"))<CR><CR>
noremap <silent> <Leader>fd :<C-U><C-R>=printf("Leaderf! gtags -d %s --auto-jump", expand("<cword>"))<CR><CR>
noremap <silent> <Leader>fn :<C-U><C-R>=printf("Leaderf gtags --next %s", "")<CR><CR>
noremap <silent> <Leader>fp :<C-U><C-R>=printf("Leaderf gtags --previous %s", "")<CR><CR>

let g:Lf_GtagsAutoGenerate = 1
let g:Lf_Gtagslabel = 'native-pygments'
let g:Lf_StlSeparator   = {'left': '', 'right': '', 'font': ''}
let g:Lf_RootMarkers    = ['.project', '.svn', '.git', '.idea']
let g:Lf_MruFileExclude = ['*.so','*.py[c0]','*.exe','*.sw?']
let g:Lf_WildIgnore = {
  \ 'dir': ['.svn', '.git', '.hg', '.cache', '.idea', '.android', '.gradle', '.IntelliJIdea*'],
  \ 'file': ['*.sw?','~$*','*.exe','*.o','*.so','*.py[co]']
\ }
let g:Lf_WorkingDirectoryMode = 'Ac'
let g:Lf_WindowHeight         = 0.30
let g:Lf_CacheDirectory       = expand('~/.cache/nvim')
let g:Lf_ShowRelativePath     = 1
let g:Lf_HideHelp             = 1
let g:Lf_ShowHidden           = 1
let g:Lf_PreviewResult        = {'Function':0, 'BufTag':0}
let g:Lf_IndexTimeLimit       = 10
let g:Lf_Ctags                = "/usr/local/bin/ctags"
" let g:Lf_PreviewCode = 1
let g:Lf_StlColorscheme = 'powerline'
let g:Lf_StlSeparator   = {'left': '⮀', 'right': '⮂', 'font': ''}
" lightline [[[2
let g:lightline = {
  \ 'colorscheme': 'srcery',
  \ 'active': {
    \ 'left': [
      \ ['mode', 'paste'],
      \ ['fugitive', 'readonly', 'filename'],
      \ ['absolutepath']
    \ ],
    \ 'right': [
      \ ['asyncrun_status'],
      \ ['lineinfo'],
      \ ['percent'],
      \ ['cocstatus', 'fileformat', 'fileencoding'],
      \ ['filetype']
    \ ]
  \ },
  \ 'component': {
    \ 'lineinfo': ' %4l,%-3v',
    \ 'asyncrun_status': '%{g:asyncrun_status}',
    \ 'close': '%{has("nvim") ? " NVIM " : " VIM "}',
    \ 'vim_logo': "\ue7c5"
  \ },
  \ 'component_function': {
    \ 'mode': 'util#lightline#mode',
    \ 'fugitive': 'util#lightline#fugitive',
    \ 'cocstatus': 'coc#status',
    \ 'readonly': 'util#lightline#readOnly',
    \ 'filename': 'util#lightline#fileName',
    \ 'fileformat': 'util#lightline#fileFormat',
    \ 'fileencoding': 'util#lightline#fileEncoding',
    \ 'filetype': 'util#lightline#fileType',
    \ 'absolutepath': 'util#lightline#absPath'
  \ },
  \ 'tabline': {
    \ 'left': [['vim_logo', 'buffers']],
    \ 'right': [['close']],
    \ 'subseparator': {
      \ 'left': '│',
      \ 'right': '│'
    \ }
  \ },
  \ 'component_expand': { 'buffers': 'lightline#bufferline#buffers' },
  \ 'component_type': { 'buffers': 'tabsel' },
  \ 'subseparator': {
    \ 'left': '│',
    \ 'right': '│'
  \ }
\ }

" lightline-bufferline [[[2
let g:lightline#bufferline#unnamed = '[No Name]'
let g:lightline#bufferline#filename_modifier = ':t'
let g:lightline#bufferline#enable_devicons = 1
let g:lightline#bufferline#unicode_symbols = 1
let g:lightline#bufferline#show_number  = 3
let g:lightline#bufferline#number_map = {
  \ 0: '⁰', 1: '¹', 2: '²', 3: '³', 4: '⁴',
  \ 5: '⁵', 6: '⁶', 7: '⁷', 8: '⁸', 9: '⁹'
\ }
nmap <Leader>1 <Plug>lightline#bufferline#go(1)
nmap <Leader>2 <Plug>lightline#bufferline#go(2)
nmap <Leader>3 <Plug>lightline#bufferline#go(3)
nmap <Leader>4 <Plug>lightline#bufferline#go(4)
nmap <Leader>5 <Plug>lightline#bufferline#go(5)
nmap <Leader>6 <Plug>lightline#bufferline#go(6)
nmap <Leader>7 <Plug>lightline#bufferline#go(7)
nmap <Leader>8 <Plug>lightline#bufferline#go(8)
nmap <Leader>9 <Plug>lightline#bufferline#go(9)
nmap <Leader>0 <Plug>lightline#bufferline#go(10)
" markdown-preview.nvim [[[2
let g:mkdp_auto_close = 0
" NeoDebug [[[2
let g:neodbg_keymap_continue           = '<F5>'   " run or continue
let g:neodbg_keymap_toggle_breakpoint  = '<F9>'   " toggle breakpoint on current line
let g:neodbg_keymap_step_into          = '<F10>' " step into
let g:neodbg_keymap_terminate_debugger = '<F12>'  " terminate debugger
" following are unuseful
let g:neodbg_keymap_run_to_cursor      = '<Nop1>' " run to cursor (tb and c)
let g:neodbg_keymap_jump               = '<Nop2>' " set next statement (tb and jump)
let g:neodbg_keymap_next               = '<Nop3>'  " next
let g:neodbg_keymap_step_out           = '<Nop4>' " setp out
let g:neodbg_keymap_print_variable     = '<Nop5>' " view variable under the cursor
let g:neodbg_keymap_stop_debugging     = '<Nop6>' " stop debugging (kill)
let g:neodbg_keymap_toggle_console_win = '<Nop7>' " toggle console window
noremap <silent> <F8> <Esc>:NeoDebug ./a.out<CR>
" python-syntax [[[2
let g:python_highlight_all = 1
let g:python_highlight_space_errors = 0
" semshi [[[2
let g:semshi#always_update_all_highlights = v:true
let g:semshi#error_sign = v:false
" sideways.vim [[[2
nnoremap <silent> <C-left>  :SidewaysLeft<CR>
nnoremap <silent> <C-right> :SidewaysRight<CR>
" sparkup [[[2
let g:sparkupExecuteMapping = '<C-i>'
" vim-argwrap [[[2
noremap <silent> <Leader>aw :ArgWrap<CR>
" vim-cpp-enhanced-highlight [[[2
let g:cpp_class_scope_highlight                  = 1
let g:cpp_member_variable_highlight              = 1
let g:cpp_class_decl_highlight                   = 1
let g:cpp_experimental_simple_template_highlight = 1
let g:cpp_concepts_highlight                     = 1
" vim-easy-align [[[2
xmap <silent> ga <Plug>(EasyAlign)
nmap <silent> ga <Plug>(EasyAlign)
" vim-exchange [[[2
nmap <silent> cx  <Plug>(Exchange)
xmap <silent> X   <Plug>(Exchange)
nmap <silent> cxc <Plug>(ExchangeClear)
nmap <silent> cxx <Plug>(ExchangeLine)
" vim-floaterm [[[2
let g:floaterm_winblend = 50
" vim-interestingwords [[[2
nnoremap <silent> <leader>k :call InterestingWords('n')<cr>
vnoremap <silent> <leader>k :call InterestingWords('v')<cr>
nnoremap <silent> <leader>K :call UncolorAllWords()<cr>
" vim-javascript [[[2
let g:javascript_plugin_jsdoc = 1
let g:javascript_plugin_ngdoc = 1
let g:javascript_plugin_flow  = 1
" vim-markdown [[[2
" 代码块高亮
let g:vim_markdown_fenced_languages = ['python=py', 'javascript=js', 'c=c']
" 避免标志符号被隐藏
let g:vim_markdown_conceal             = 0
let g:vim_markdown_conceal_code_blocks = 0
let g:tex_conceal                      = ""
let g:vim_markdown_math                = 1
" vim-move [[[2
let g:move_map_keys    = 0
let g:move_auto_indent = 1
vmap <silent> J <Plug>MoveBlockDown
vmap <silent> K <Plug>MoveBlockUp
nmap <silent> J <Plug>MoveLineDown
nmap <silent> K <Plug>MoveLineUp
" vim-mundo [[[2
let g:mundo_width              = 30
let g:mundo_preview_height     = 10
let g:mundo_right              = 0
let g:mundo_preview_bottom     = 1
let g:mundo_auto_preview_delay = 10
" vim-startify [[[2
noremap <silent> <Space> <Esc>:Startify<CR>
let g:startify_bookmarks = [
  \ {'v': '~/.vim/vimrc'},
  \ {'c': '~/.vim/coc-settings.json'}
\ ]
let g:startify_files_number = 8
let g:startify_padding_left = 15
let g:startify_custom_header = [
  \ '                      ___       ___       ___       ___       ___       ___       ___       ___   ',
  \ '                     /\__\     /\  \     /\__\     /\  \     /\  \     /\__\     /\  \     /\  \  ',
  \ '                    /:/ _/_   /::\  \   /:/  /    /::\  \   _\:\  \   /:/ _/_   /::\  \   /::\  \ ',
  \ '                   |::L/\__\ /:/\:\__\ /:/__/    /:/\:\__\ /\/::\__\ /::-"\__\ /\:\:\__\ /\:\:\__\',
  \ '                   |::::/  / \:\/:/  / \:\  \    \:\/:/  / \::/\/__/ \;:;-",-" \:\:\/__/ \:\:\/__/',
  \ '                    L;;/__/   \::/  /   \:\__\    \::/  /   \:\__\    |:|  |    \::/  /   \::/  / ',
  \ '                               \/__/     \/__/     \/__/     \/__/     \|__|     \/__/     \/__/  ']
autocmd User Startified setlocal buflisted
if has('nvim')
  highlight StartifyHeader guifg=#FF00FF
  highlight StartifyNumber guifg=#00FF00
  highlight StartifyPath   guifg=#00AFFF
  highlight StartifySlash  guifg=#DF875F
endif
" vim-translate-me [[[2
nmap <silent>    ,t        <Plug>Translate
nmap <silent>    ,w        <Plug>TranslateW
nmap <silent>    ,r        <Plug>TranslateR
vmap <silent>    ,t        <Plug>TranslateV
vmap <silent>    ,w        <Plug>TranslateWV
vmap <silent>    ,r        <Plug>TranslateRV
" vimtex [[[2
let g:tex_flavor='latex'
let g:vimtex_view_method='zathura'
let g:vimtex_mappings_enabled = 0
let g:vimtex_fold_enabled = 1
let g:vimtex_quickfix_open_on_warning = 0
" let g:vimtex_quickfix_autoclose_after_keystrokes = 1
let g:vimtex_compiler_method = 'latexmk'
let g:vimtex_compiler_latexmk_engines = {'_': '-xelatex'}
let g:vimtex_compiler_latexrun_engines = {'_': 'xelatex'}
" NvimQt: [[[1
if exists('g:GuiLoaded')
  inoremap <S-CR> <Esc>o
  inoremap <C-CR> <Esc>O
  GuiFont! Monaco:h11
  GuiTabline 0
  GuiPopupmenu 0
  let g:GuiWindowMaximized = 1
endif
" WindowsOnly: [[[1
if has('win32') || has('win64')
  if !has('nvim')
    set pythonthreedll=D:\Applications\Python36\python36.dll
  endif
  if has('gui_running')
    inoremap <S-CR> <Esc>o
    inoremap <C-CR> <Esc>O
    set encoding=utf-8
    au GUIEnter * simalt ~x " 窗口启动时自动最大化
    set guioptions-=m       " 隐藏菜单栏
    set guioptions-=T       " 隐藏工具栏
    set guioptions-=L       " 隐藏左侧滚动条
    set guioptions-=r       " 隐藏右侧滚动条
    set guioptions-=b       " 隐藏底部滚动条
    set guifont=Monaco\ for\ Powerline:h10
    " set guifont=DejaVu\ Sans\ Mono\ for\ Powerline:h11:b
    source $VIMRUNTIME/delmenu.vim
    source $VIMRUNTIME/menu.vim
    language messages zh_CN.utf-8
  endif
endif
